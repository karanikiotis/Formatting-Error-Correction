// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.tfs.build.buildservice._03._AgentStatus;
import ms.tfs.build.buildservice._03._BuildAgent;
import ms.tfs.build.buildservice._03._BuildController;
import ms.tfs.build.buildservice._03._BuildDefinition;
import ms.tfs.build.buildservice._03._BuildDefinitionQueryResult;
import ms.tfs.build.buildservice._03._BuildDefinitionSpec;
import ms.tfs.build.buildservice._03._BuildDeletionResult;
import ms.tfs.build.buildservice._03._BuildDetail;
import ms.tfs.build.buildservice._03._BuildDetailSpec;
import ms.tfs.build.buildservice._03._BuildInformationNode;
import ms.tfs.build.buildservice._03._BuildPhaseStatus;
import ms.tfs.build.buildservice._03._BuildQueryOrder;
import ms.tfs.build.buildservice._03._BuildQueryResult;
import ms.tfs.build.buildservice._03._BuildReason;
import ms.tfs.build.buildservice._03._BuildServiceHost;
import ms.tfs.build.buildservice._03._BuildStatus;
import ms.tfs.build.buildservice._03._BuildTeamProjectPermission;
import ms.tfs.build.buildservice._03._BuildUpdate;
import ms.tfs.build.buildservice._03._BuildUpdateOptions;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_AddBuildDefinitions;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_AddBuildDefinitionsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_AddBuildQualities;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_AddBuildQualitiesResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_AddProcessTemplates;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_AddProcessTemplatesResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_CreateTeamProjectComponents;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_CreateTeamProjectComponentsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteBuildDefinitions;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteBuildDefinitionsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteBuildQualities;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteBuildQualitiesResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteBuilds;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteBuildsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteProcessTemplates;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DeleteProcessTemplatesResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DestroyBuilds;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_DestroyBuildsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_GetAffectedBuildDefinitions;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_GetAffectedBuildDefinitionsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_GetBuildQualities;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_GetBuildQualitiesResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_NotifyBuildCompleted;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_NotifyBuildCompletedResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuildDefinitions;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuildDefinitionsByUri;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuildDefinitionsByUriResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuildDefinitionsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuilds;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuildsByUri;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuildsByUriResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryBuildsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryProcessTemplates;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_QueryProcessTemplatesResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_StopBuilds;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_StopBuildsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateBuildDefinitions;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateBuildDefinitionsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateBuildInformation;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateBuildInformationResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateBuilds;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateBuildsResponse;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateProcessTemplates;
import ms.tfs.build.buildservice._03._BuildWebServiceSoap_UpdateProcessTemplatesResponse;
import ms.tfs.build.buildservice._03._ContinuousIntegrationType;
import ms.tfs.build.buildservice._03._ControllerStatus;
import ms.tfs.build.buildservice._03._DeleteOptions;
import ms.tfs.build.buildservice._03._Failure;
import ms.tfs.build.buildservice._03._InformationChangeRequest;
import ms.tfs.build.buildservice._03._InformationField;
import ms.tfs.build.buildservice._03._ProcessTemplate;
import ms.tfs.build.buildservice._03._ProcessTemplateType;
import ms.tfs.build.buildservice._03._QueryDeletedOption;
import ms.tfs.build.buildservice._03._QueryOptions;
import ms.tfs.build.buildservice._03._RetentionPolicy;
import ms.tfs.build.buildservice._03._Schedule;
import ms.tfs.build.buildservice._03._ScheduleDays;
import ms.tfs.build.buildservice._03._WorkspaceMapping;
import ms.tfs.build.buildservice._03._WorkspaceMappingType;
import ms.tfs.build.buildservice._03._WorkspaceTemplate;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.String;

import java.net.URI;

import java.util.Calendar;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildService/03}BuildWebServiceSoap12Service
 */
public class _BuildWebServiceSoap12Service
    extends SOAP12Service
    implements _BuildWebServiceSoap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildService/03",
                "BuildWebServiceSoap12Service");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/Build/v3.0/BuildService.asmx";

    public _BuildWebServiceSoap12Service(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _BuildWebServiceSoap12Service(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _BuildWebServiceSoap12Service.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _BuildWebServiceSoap12Service.ENDPOINT_PATH;
    }

    public _BuildDefinition[] addBuildDefinitions(final _BuildDefinition[] definitions)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_AddBuildDefinitions requestData = new _BuildWebServiceSoap_AddBuildDefinitions(
                    definitions);

        final SOAPRequest request = createSOAPRequest(
                "AddBuildDefinitions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "AddBuildDefinitions");
                    }
                });

        final _BuildWebServiceSoap_AddBuildDefinitionsResponse responseData = new _BuildWebServiceSoap_AddBuildDefinitionsResponse();

        executeSOAPRequest(
            request,
            "AddBuildDefinitionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getAddBuildDefinitionsResult();
    }

    public void addBuildQualities(
        final String teamProject,
        final String[] qualities)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_AddBuildQualities requestData = new _BuildWebServiceSoap_AddBuildQualities(teamProject,
                qualities);

        final SOAPRequest request = createSOAPRequest(
                "AddBuildQualities",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "AddBuildQualities");
                    }
                });

        final _BuildWebServiceSoap_AddBuildQualitiesResponse responseData = new _BuildWebServiceSoap_AddBuildQualitiesResponse();

        executeSOAPRequest(
            request,
            "AddBuildQualitiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ProcessTemplate[] addProcessTemplates(final _ProcessTemplate[] processTemplates)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_AddProcessTemplates requestData = new _BuildWebServiceSoap_AddProcessTemplates(
                    processTemplates);

        final SOAPRequest request = createSOAPRequest(
                "AddProcessTemplates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "AddProcessTemplates");
                    }
                });

        final _BuildWebServiceSoap_AddProcessTemplatesResponse responseData = new _BuildWebServiceSoap_AddProcessTemplatesResponse();

        executeSOAPRequest(
            request,
            "AddProcessTemplatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getAddProcessTemplatesResult();
    }

    public void deleteBuildDefinitions(final String[] uris)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_DeleteBuildDefinitions requestData = new _BuildWebServiceSoap_DeleteBuildDefinitions(
                    uris);

        final SOAPRequest request = createSOAPRequest(
                "DeleteBuildDefinitions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteBuildDefinitions");
                    }
                });

        final _BuildWebServiceSoap_DeleteBuildDefinitionsResponse responseData = new _BuildWebServiceSoap_DeleteBuildDefinitionsResponse();

        executeSOAPRequest(
            request,
            "DeleteBuildDefinitionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteBuildQualities(
        final String teamProject,
        final String[] qualities)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_DeleteBuildQualities requestData = new _BuildWebServiceSoap_DeleteBuildQualities(
                    teamProject,
                    qualities);

        final SOAPRequest request = createSOAPRequest(
                "DeleteBuildQualities",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteBuildQualities");
                    }
                });

        final _BuildWebServiceSoap_DeleteBuildQualitiesResponse responseData = new _BuildWebServiceSoap_DeleteBuildQualitiesResponse();

        executeSOAPRequest(
            request,
            "DeleteBuildQualitiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _BuildDeletionResult[] deleteBuilds(
        final String[] uris,
        final _DeleteOptions deleteOptions)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_DeleteBuilds requestData = new _BuildWebServiceSoap_DeleteBuilds(uris, deleteOptions);

        final SOAPRequest request = createSOAPRequest(
                "DeleteBuilds",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteBuilds");
                    }
                });

        final _BuildWebServiceSoap_DeleteBuildsResponse responseData = new _BuildWebServiceSoap_DeleteBuildsResponse();

        executeSOAPRequest(
            request,
            "DeleteBuildsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDeleteBuildsResult();
    }

    public void destroyBuilds(final String[] uris)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_DestroyBuilds requestData = new _BuildWebServiceSoap_DestroyBuilds(uris);

        final SOAPRequest request = createSOAPRequest(
                "DestroyBuilds",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DestroyBuilds");
                    }
                });

        final _BuildWebServiceSoap_DestroyBuildsResponse responseData = new _BuildWebServiceSoap_DestroyBuildsResponse();

        executeSOAPRequest(
            request,
            "DestroyBuildsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteProcessTemplates(final int[] processTemplateIds)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_DeleteProcessTemplates requestData = new _BuildWebServiceSoap_DeleteProcessTemplates(
                    processTemplateIds);

        final SOAPRequest request = createSOAPRequest(
                "DeleteProcessTemplates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteProcessTemplates");
                    }
                });

        final _BuildWebServiceSoap_DeleteProcessTemplatesResponse responseData = new _BuildWebServiceSoap_DeleteProcessTemplatesResponse();

        executeSOAPRequest(
            request,
            "DeleteProcessTemplatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _BuildDefinition[] getAffectedBuildDefinitions(
        final String[] serverItems,
        final _ContinuousIntegrationType continuousIntegrationType)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_GetAffectedBuildDefinitions requestData = new _BuildWebServiceSoap_GetAffectedBuildDefinitions(
                    serverItems,
                    continuousIntegrationType);

        final SOAPRequest request = createSOAPRequest(
                "GetAffectedBuildDefinitions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetAffectedBuildDefinitions");
                    }
                });

        final _BuildWebServiceSoap_GetAffectedBuildDefinitionsResponse responseData = new _BuildWebServiceSoap_GetAffectedBuildDefinitionsResponse();

        executeSOAPRequest(
            request,
            "GetAffectedBuildDefinitionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetAffectedBuildDefinitionsResult();
    }

    public String[] getBuildQualities(final String teamProject)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_GetBuildQualities requestData = new _BuildWebServiceSoap_GetBuildQualities(teamProject);

        final SOAPRequest request = createSOAPRequest(
                "GetBuildQualities",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetBuildQualities");
                    }
                });

        final _BuildWebServiceSoap_GetBuildQualitiesResponse responseData = new _BuildWebServiceSoap_GetBuildQualitiesResponse();

        executeSOAPRequest(
            request,
            "GetBuildQualitiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetBuildQualitiesResult();
    }

    public _ProcessTemplate[] queryProcessTemplates(
        final String teamProject,
        final _ProcessTemplateType[] queryTypes)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_QueryProcessTemplates requestData = new _BuildWebServiceSoap_QueryProcessTemplates(
                    teamProject,
                    queryTypes);

        final SOAPRequest request = createSOAPRequest(
                "QueryProcessTemplates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryProcessTemplates");
                    }
                });

        final _BuildWebServiceSoap_QueryProcessTemplatesResponse responseData = new _BuildWebServiceSoap_QueryProcessTemplatesResponse();

        executeSOAPRequest(
            request,
            "QueryProcessTemplatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryProcessTemplatesResult();
    }

    public _BuildDetail notifyBuildCompleted(final String buildUri)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_NotifyBuildCompleted requestData = new _BuildWebServiceSoap_NotifyBuildCompleted(
                    buildUri);

        final SOAPRequest request = createSOAPRequest(
                "NotifyBuildCompleted",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "NotifyBuildCompleted");
                    }
                });

        final _BuildWebServiceSoap_NotifyBuildCompletedResponse responseData = new _BuildWebServiceSoap_NotifyBuildCompletedResponse();

        executeSOAPRequest(
            request,
            "NotifyBuildCompletedResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getNotifyBuildCompletedResult();
    }

    public _BuildDefinitionQueryResult[] queryBuildDefinitions(final _BuildDefinitionSpec[] specs)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_QueryBuildDefinitions requestData = new _BuildWebServiceSoap_QueryBuildDefinitions(
                    specs);

        final SOAPRequest request = createSOAPRequest(
                "QueryBuildDefinitions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryBuildDefinitions");
                    }
                });

        final _BuildWebServiceSoap_QueryBuildDefinitionsResponse responseData = new _BuildWebServiceSoap_QueryBuildDefinitionsResponse();

        executeSOAPRequest(
            request,
            "QueryBuildDefinitionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryBuildDefinitionsResult();
    }

    public _BuildDefinitionQueryResult queryBuildDefinitionsByUri(
        final String[] uris,
        final _QueryOptions options)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_QueryBuildDefinitionsByUri requestData = new _BuildWebServiceSoap_QueryBuildDefinitionsByUri(
                    uris,
                    options);

        final SOAPRequest request = createSOAPRequest(
                "QueryBuildDefinitionsByUri",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryBuildDefinitionsByUri");
                    }
                });

        final _BuildWebServiceSoap_QueryBuildDefinitionsByUriResponse responseData = new _BuildWebServiceSoap_QueryBuildDefinitionsByUriResponse();

        executeSOAPRequest(
            request,
            "QueryBuildDefinitionsByUriResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryBuildDefinitionsByUriResult();
    }

    public _BuildQueryResult[] queryBuilds(final _BuildDetailSpec[] specs)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_QueryBuilds requestData = new _BuildWebServiceSoap_QueryBuilds(specs);

        final SOAPRequest request = createSOAPRequest(
                "QueryBuilds",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryBuilds");
                    }
                });

        final _BuildWebServiceSoap_QueryBuildsResponse responseData = new _BuildWebServiceSoap_QueryBuildsResponse();

        executeSOAPRequest(
            request,
            "QueryBuildsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryBuildsResult();
    }

    public _BuildQueryResult queryBuildsByUri(
        final String[] uris,
        final String[] informationTypes,
        final _QueryOptions options,
        final _QueryDeletedOption deletedOption)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_QueryBuildsByUri requestData = new _BuildWebServiceSoap_QueryBuildsByUri(uris,
                informationTypes, options, deletedOption);

        final SOAPRequest request = createSOAPRequest(
                "QueryBuildsByUri",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryBuildsByUri");
                    }
                });

        final _BuildWebServiceSoap_QueryBuildsByUriResponse responseData = new _BuildWebServiceSoap_QueryBuildsByUriResponse();

        executeSOAPRequest(
            request,
            "QueryBuildsByUriResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryBuildsByUriResult();
    }

    public void stopBuilds(final String[] uris)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_StopBuilds requestData = new _BuildWebServiceSoap_StopBuilds(uris);

        final SOAPRequest request = createSOAPRequest(
                "StopBuilds",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "StopBuilds");
                    }
                });

        final _BuildWebServiceSoap_StopBuildsResponse responseData = new _BuildWebServiceSoap_StopBuildsResponse();

        executeSOAPRequest(
            request,
            "StopBuildsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _BuildDefinition[] updateBuildDefinitions(final _BuildDefinition[] updates)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_UpdateBuildDefinitions requestData = new _BuildWebServiceSoap_UpdateBuildDefinitions(
                    updates);

        final SOAPRequest request = createSOAPRequest(
                "UpdateBuildDefinitions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateBuildDefinitions");
                    }
                });

        final _BuildWebServiceSoap_UpdateBuildDefinitionsResponse responseData = new _BuildWebServiceSoap_UpdateBuildDefinitionsResponse();

        executeSOAPRequest(
            request,
            "UpdateBuildDefinitionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getUpdateBuildDefinitionsResult();
    }

    public _BuildInformationNode[] updateBuildInformation(final _InformationChangeRequest[] changes)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_UpdateBuildInformation requestData = new _BuildWebServiceSoap_UpdateBuildInformation(
                    changes);

        final SOAPRequest request = createSOAPRequest(
                "UpdateBuildInformation",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateBuildInformation");
                    }
                });

        final _BuildWebServiceSoap_UpdateBuildInformationResponse responseData = new _BuildWebServiceSoap_UpdateBuildInformationResponse();

        executeSOAPRequest(
            request,
            "UpdateBuildInformationResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getUpdateBuildInformationResult();
    }

    public _BuildDetail[] updateBuilds(final _BuildUpdateOptions[] updateOptions)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_UpdateBuilds requestData = new _BuildWebServiceSoap_UpdateBuilds(updateOptions);

        final SOAPRequest request = createSOAPRequest(
                "UpdateBuilds",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateBuilds");
                    }
                });

        final _BuildWebServiceSoap_UpdateBuildsResponse responseData = new _BuildWebServiceSoap_UpdateBuildsResponse();

        executeSOAPRequest(
            request,
            "UpdateBuildsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getUpdateBuildsResult();
    }

    public _ProcessTemplate[] updateProcessTemplates(final _ProcessTemplate[] processTemplates)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_UpdateProcessTemplates requestData = new _BuildWebServiceSoap_UpdateProcessTemplates(
                    processTemplates);

        final SOAPRequest request = createSOAPRequest(
                "UpdateProcessTemplates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateProcessTemplates");
                    }
                });

        final _BuildWebServiceSoap_UpdateProcessTemplatesResponse responseData = new _BuildWebServiceSoap_UpdateProcessTemplatesResponse();

        executeSOAPRequest(
            request,
            "UpdateProcessTemplatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getUpdateProcessTemplatesResult();
    }

    public void createTeamProjectComponents(
        final String projectUri,
        final _BuildTeamProjectPermission[] permissions)
        throws TransportException, SOAPFault
    {
        final _BuildWebServiceSoap_CreateTeamProjectComponents requestData = new _BuildWebServiceSoap_CreateTeamProjectComponents(
                    projectUri,
                    permissions);

        final SOAPRequest request = createSOAPRequest(
                "CreateTeamProjectComponents",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateTeamProjectComponents");
                    }
                });

        final _BuildWebServiceSoap_CreateTeamProjectComponentsResponse responseData = new _BuildWebServiceSoap_CreateTeamProjectComponentsResponse();

        executeSOAPRequest(
            request,
            "CreateTeamProjectComponentsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }
}
