// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.services.authorization._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.tfs.services.authorization._03._AccessControlEntry;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_AddAccessControlEntry;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_AddAccessControlEntryResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_CheckPermission;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_CheckPermissionResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_GetChangedAccessControlEntries;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_GetChangedAccessControlEntriesResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_GetObjectClass;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_GetObjectClassResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_IsPermittedByActionList;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_IsPermittedByActionListResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_IsPermittedByObjectList;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_IsPermittedByObjectListResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_IsPermittedBySidList;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_IsPermittedBySidListResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ListLocalizedActionNames;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ListLocalizedActionNamesResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ListObjectClassActions;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ListObjectClassActionsResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ListObjectClasses;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ListObjectClassesResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ReadAccessControlList;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ReadAccessControlListResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ReadAccessControlLists;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ReadAccessControlListsResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_RegisterObject;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_RegisterObjectResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_RemoveAccessControlEntry;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_RemoveAccessControlEntryResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ReplaceAccessControlList;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ReplaceAccessControlListResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ResetInheritance;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_ResetInheritanceResponse;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_UnregisterObject;
import ms.tfs.services.authorization._03._AuthorizationServiceSoap_UnregisterObjectResponse;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.String;

import java.net.URI;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Authorization/03}AuthorizationServiceSoap12Service
 */
public class _AuthorizationServiceSoap12Service
    extends SOAP12Service
    implements _AuthorizationServiceSoap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Authorization/03",
                "AuthorizationServiceSoap12Service");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/Services/v1.0/AuthorizationService.asmx";

    public _AuthorizationServiceSoap12Service(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _AuthorizationServiceSoap12Service(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _AuthorizationServiceSoap12Service.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _AuthorizationServiceSoap12Service.ENDPOINT_PATH;
    }

    public void registerObject(
        final String objectId,
        final String objectClassId,
        final String projectUri,
        final String parentObjectId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_RegisterObject requestData = new _AuthorizationServiceSoap_RegisterObject(objectId,
                objectClassId,
                projectUri,
                parentObjectId);

        final SOAPRequest request = createSOAPRequest(
                "RegisterObject",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RegisterObject");
                    }
                });

        final _AuthorizationServiceSoap_RegisterObjectResponse responseData = new _AuthorizationServiceSoap_RegisterObjectResponse();

        executeSOAPRequest(
            request,
            "RegisterObjectResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void unregisterObject(final String objectId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_UnregisterObject requestData = new _AuthorizationServiceSoap_UnregisterObject(
                    objectId);

        final SOAPRequest request = createSOAPRequest(
                "UnregisterObject",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UnregisterObject");
                    }
                });

        final _AuthorizationServiceSoap_UnregisterObjectResponse responseData = new _AuthorizationServiceSoap_UnregisterObjectResponse();

        executeSOAPRequest(
            request,
            "UnregisterObjectResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void resetInheritance(
        final String objectId,
        final String parentObejctId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_ResetInheritance requestData = new _AuthorizationServiceSoap_ResetInheritance(
                    objectId,
                    parentObejctId);

        final SOAPRequest request = createSOAPRequest(
                "ResetInheritance",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ResetInheritance");
                    }
                });

        final _AuthorizationServiceSoap_ResetInheritanceResponse responseData = new _AuthorizationServiceSoap_ResetInheritanceResponse();

        executeSOAPRequest(
            request,
            "ResetInheritanceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public String getObjectClass(final String objectId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_GetObjectClass requestData = new _AuthorizationServiceSoap_GetObjectClass(objectId);

        final SOAPRequest request = createSOAPRequest(
                "GetObjectClass",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetObjectClass");
                    }
                });

        final _AuthorizationServiceSoap_GetObjectClassResponse responseData = new _AuthorizationServiceSoap_GetObjectClassResponse();

        executeSOAPRequest(
            request,
            "GetObjectClassResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetObjectClassResult();
    }

    public String[] listObjectClasses()
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_ListObjectClasses requestData = new _AuthorizationServiceSoap_ListObjectClasses();

        final SOAPRequest request = createSOAPRequest(
                "ListObjectClasses",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListObjectClasses");
                    }
                });

        final _AuthorizationServiceSoap_ListObjectClassesResponse responseData = new _AuthorizationServiceSoap_ListObjectClassesResponse();

        executeSOAPRequest(
            request,
            "ListObjectClassesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListObjectClassesResult();
    }

    public String[] listObjectClassActions(final String objectClassId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_ListObjectClassActions requestData = new _AuthorizationServiceSoap_ListObjectClassActions(
                    objectClassId);

        final SOAPRequest request = createSOAPRequest(
                "ListObjectClassActions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListObjectClassActions");
                    }
                });

        final _AuthorizationServiceSoap_ListObjectClassActionsResponse responseData = new _AuthorizationServiceSoap_ListObjectClassActionsResponse();

        executeSOAPRequest(
            request,
            "ListObjectClassActionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListObjectClassActionsResult();
    }

    public String[] listLocalizedActionNames(
        final String objectClassId,
        final String[] actionId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_ListLocalizedActionNames requestData = new _AuthorizationServiceSoap_ListLocalizedActionNames(
                    objectClassId,
                    actionId);

        final SOAPRequest request = createSOAPRequest(
                "ListLocalizedActionNames",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListLocalizedActionNames");
                    }
                });

        final _AuthorizationServiceSoap_ListLocalizedActionNamesResponse responseData = new _AuthorizationServiceSoap_ListLocalizedActionNamesResponse();

        executeSOAPRequest(
            request,
            "ListLocalizedActionNamesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListLocalizedActionNamesResult();
    }

    public void addAccessControlEntry(
        final String objectId,
        final _AccessControlEntry ace)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_AddAccessControlEntry requestData = new _AuthorizationServiceSoap_AddAccessControlEntry(
                    objectId,
                    ace);

        final SOAPRequest request = createSOAPRequest(
                "AddAccessControlEntry",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "AddAccessControlEntry");
                    }
                });

        final _AuthorizationServiceSoap_AddAccessControlEntryResponse responseData = new _AuthorizationServiceSoap_AddAccessControlEntryResponse();

        executeSOAPRequest(
            request,
            "AddAccessControlEntryResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void removeAccessControlEntry(
        final String objectId,
        final _AccessControlEntry ace)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_RemoveAccessControlEntry requestData = new _AuthorizationServiceSoap_RemoveAccessControlEntry(
                    objectId,
                    ace);

        final SOAPRequest request = createSOAPRequest(
                "RemoveAccessControlEntry",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RemoveAccessControlEntry");
                    }
                });

        final _AuthorizationServiceSoap_RemoveAccessControlEntryResponse responseData = new _AuthorizationServiceSoap_RemoveAccessControlEntryResponse();

        executeSOAPRequest(
            request,
            "RemoveAccessControlEntryResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public String getChangedAccessControlEntries(final int sequence_id)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_GetChangedAccessControlEntries requestData = new _AuthorizationServiceSoap_GetChangedAccessControlEntries(
                    sequence_id);

        final SOAPRequest request = createSOAPRequest(
                "GetChangedAccessControlEntries",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetChangedAccessControlEntries");
                    }
                });

        final _AuthorizationServiceSoap_GetChangedAccessControlEntriesResponse responseData = new _AuthorizationServiceSoap_GetChangedAccessControlEntriesResponse();

        executeSOAPRequest(
            request,
            "GetChangedAccessControlEntriesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetChangedAccessControlEntriesResult();
    }

    public void replaceAccessControlList(
        final String objectId,
        final _AccessControlEntry[] acl)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_ReplaceAccessControlList requestData = new _AuthorizationServiceSoap_ReplaceAccessControlList(
                    objectId,
                    acl);

        final SOAPRequest request = createSOAPRequest(
                "ReplaceAccessControlList",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ReplaceAccessControlList");
                    }
                });

        final _AuthorizationServiceSoap_ReplaceAccessControlListResponse responseData = new _AuthorizationServiceSoap_ReplaceAccessControlListResponse();

        executeSOAPRequest(
            request,
            "ReplaceAccessControlListResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _AccessControlEntry[][] readAccessControlLists(final String[] objectId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_ReadAccessControlLists requestData = new _AuthorizationServiceSoap_ReadAccessControlLists(
                    objectId);

        final SOAPRequest request = createSOAPRequest(
                "ReadAccessControlLists",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ReadAccessControlLists");
                    }
                });

        final _AuthorizationServiceSoap_ReadAccessControlListsResponse responseData = new _AuthorizationServiceSoap_ReadAccessControlListsResponse();

        executeSOAPRequest(
            request,
            "ReadAccessControlListsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReadAccessControlListsResult();
    }

    public _AccessControlEntry[] readAccessControlList(final String objectId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_ReadAccessControlList requestData = new _AuthorizationServiceSoap_ReadAccessControlList(
                    objectId);

        final SOAPRequest request = createSOAPRequest(
                "ReadAccessControlList",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ReadAccessControlList");
                    }
                });

        final _AuthorizationServiceSoap_ReadAccessControlListResponse responseData = new _AuthorizationServiceSoap_ReadAccessControlListResponse();

        executeSOAPRequest(
            request,
            "ReadAccessControlListResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReadAccessControlListResult();
    }

    public boolean[] isPermittedByObjectList(
        final String[] objectId,
        final String actionId,
        final String userSid)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_IsPermittedByObjectList requestData = new _AuthorizationServiceSoap_IsPermittedByObjectList(
                    objectId,
                    actionId,
                    userSid);

        final SOAPRequest request = createSOAPRequest(
                "IsPermittedByObjectList",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "IsPermittedByObjectList");
                    }
                });

        final _AuthorizationServiceSoap_IsPermittedByObjectListResponse responseData = new _AuthorizationServiceSoap_IsPermittedByObjectListResponse();

        executeSOAPRequest(
            request,
            "IsPermittedByObjectListResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getIsPermittedByObjectListResult();
    }

    public boolean[] isPermittedByActionList(
        final String objectId,
        final String[] actionId,
        final String userSid)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_IsPermittedByActionList requestData = new _AuthorizationServiceSoap_IsPermittedByActionList(
                    objectId,
                    actionId,
                    userSid);

        final SOAPRequest request = createSOAPRequest(
                "IsPermittedByActionList",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "IsPermittedByActionList");
                    }
                });

        final _AuthorizationServiceSoap_IsPermittedByActionListResponse responseData = new _AuthorizationServiceSoap_IsPermittedByActionListResponse();

        executeSOAPRequest(
            request,
            "IsPermittedByActionListResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getIsPermittedByActionListResult();
    }

    public boolean[] isPermittedBySidList(
        final String objectId,
        final String actionId,
        final String[] userSid)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_IsPermittedBySidList requestData = new _AuthorizationServiceSoap_IsPermittedBySidList(
                    objectId,
                    actionId,
                    userSid);

        final SOAPRequest request = createSOAPRequest(
                "IsPermittedBySidList",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "IsPermittedBySidList");
                    }
                });

        final _AuthorizationServiceSoap_IsPermittedBySidListResponse responseData = new _AuthorizationServiceSoap_IsPermittedBySidListResponse();

        executeSOAPRequest(
            request,
            "IsPermittedBySidListResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getIsPermittedBySidListResult();
    }

    public void checkPermission(
        final String objectId,
        final String actionId)
        throws TransportException, SOAPFault
    {
        final _AuthorizationServiceSoap_CheckPermission requestData = new _AuthorizationServiceSoap_CheckPermission(
                    objectId,
                    actionId);

        final SOAPRequest request = createSOAPRequest(
                "CheckPermission",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckPermission");
                    }
                });

        final _AuthorizationServiceSoap_CheckPermissionResponse responseData = new _AuthorizationServiceSoap_CheckPermissionResponse();

        executeSOAPRequest(
            request,
            "CheckPermissionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }
}
