// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.ws;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.ws._CatalogServiceReference;
import ms.ws._LocationMapping;
import ms.ws._ServiceDefinition;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _CatalogServiceReference
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String resourceIdentifier;
    protected String associationKey;

    // Elements
    protected _ServiceDefinition serviceDefinition;

    public _CatalogServiceReference()
    {
        super();
    }

    public _CatalogServiceReference(
        final String resourceIdentifier,
        final String associationKey,
        final _ServiceDefinition serviceDefinition)
    {
        // TODO : Call super() instead of setting all fields directly?
        setResourceIdentifier(resourceIdentifier);
        setAssociationKey(associationKey);
        setServiceDefinition(serviceDefinition);
    }

    public String getResourceIdentifier()
    {
        return this.resourceIdentifier;
    }

    public void setResourceIdentifier(final String value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException(
                    "'ResourceIdentifier' is a required attribute, its value cannot be null");
        }

        this.resourceIdentifier = value;
    }

    public String getAssociationKey()
    {
        return this.associationKey;
    }

    public void setAssociationKey(final String value)
    {
        this.associationKey = value;
    }

    public _ServiceDefinition getServiceDefinition()
    {
        return this.serviceDefinition;
    }

    public void setServiceDefinition(_ServiceDefinition value)
    {
        this.serviceDefinition = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ResourceIdentifier",
            this.resourceIdentifier);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "AssociationKey",
            this.associationKey);

        // Elements
        if (this.serviceDefinition != null)
        {
            this.serviceDefinition.writeAsElement(
                writer,
                "ServiceDefinition");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("ResourceIdentifier"))
            {
                this.resourceIdentifier = attributeValue;
            }
            else if (localName.equalsIgnoreCase("AssociationKey"))
            {
                this.associationKey = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ServiceDefinition"))
                {
                    this.serviceDefinition = new _ServiceDefinition();
                    this.serviceDefinition.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
