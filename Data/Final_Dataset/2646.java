// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangeRequest;
import ms.tfs.versioncontrol.clientservices._03._ItemSpec;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;
import ms.tfs.versioncontrol.clientservices._03._RecursionType;
import ms.tfs.versioncontrol.clientservices._03._RequestType;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ChangeRequest
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected _RequestType req = _RequestType.None;
    protected int did = 0;
    protected int enc = -2;
    protected _ItemType type = _ItemType.Any;
    protected _LockLevel lock = _LockLevel.Unchanged;
    protected String target;
    protected _ItemType targettype = _ItemType.Any;

    // Elements
    protected _ItemSpec item;
    protected _VersionSpec vspec;
    protected _PropertyValue[] properties;

    public _ChangeRequest()
    {
        super();
    }

    public _ChangeRequest(
        final _RequestType req,
        final int did,
        final int enc,
        final _ItemType type,
        final _LockLevel lock,
        final String target,
        final _ItemType targettype,
        final _ItemSpec item,
        final _VersionSpec vspec,
        final _PropertyValue[] properties)
    {
        // TODO : Call super() instead of setting all fields directly?
        setReq(req);
        setDid(did);
        setEnc(enc);
        setType(type);
        setLock(lock);
        setTarget(target);
        setTargettype(targettype);
        setItem(item);
        setVspec(vspec);
        setProperties(properties);
    }

    public _RequestType getReq()
    {
        return this.req;
    }

    public void setReq(final _RequestType value)
    {
        this.req = value;
    }

    public int getDid()
    {
        return this.did;
    }

    public void setDid(final int value)
    {
        this.did = value;
    }

    public int getEnc()
    {
        return this.enc;
    }

    public void setEnc(final int value)
    {
        this.enc = value;
    }

    public _ItemType getType()
    {
        return this.type;
    }

    public void setType(final _ItemType value)
    {
        this.type = value;
    }

    public _LockLevel getLock()
    {
        return this.lock;
    }

    public void setLock(final _LockLevel value)
    {
        this.lock = value;
    }

    public String getTarget()
    {
        return this.target;
    }

    public void setTarget(final String value)
    {
        this.target = value;
    }

    public _ItemType getTargettype()
    {
        return this.targettype;
    }

    public void setTargettype(final _ItemType value)
    {
        this.targettype = value;
    }

    public _ItemSpec getItem()
    {
        return this.item;
    }

    public void setItem(_ItemSpec value)
    {
        this.item = value;
    }

    public _VersionSpec getVspec()
    {
        return this.vspec;
    }

    public void setVspec(_VersionSpec value)
    {
        this.vspec = value;
    }

    public _PropertyValue[] getProperties()
    {
        return this.properties;
    }

    public void setProperties(_PropertyValue[] value)
    {
        this.properties = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        if (this.req != null)
        {
            this.req.writeAsAttribute(
                writer,
                "req");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "did",
            this.did);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "enc",
            this.enc);

        if (this.type != null)
        {
            this.type.writeAsAttribute(
                writer,
                "type");
        }

        if (this.lock != null)
        {
            this.lock.writeAsAttribute(
                writer,
                "lock");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "target",
            this.target);

        if (this.targettype != null)
        {
            this.targettype.writeAsAttribute(
                writer,
                "targettype");
        }

        // Elements
        if (this.item != null)
        {
            this.item.writeAsElement(
                writer,
                "item");
        }

        if (this.vspec != null)
        {
            this.vspec.writeAsElement(
                writer,
                "vspec");
        }

        if (this.properties != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Properties");

            for (int iterator0 = 0; iterator0 < this.properties.length; iterator0++)
            {
                this.properties[iterator0].writeAsElement(
                    writer,
                    "PropertyValue");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("req"))
            {
                this.req = _RequestType.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("did"))
            {
                this.did = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("enc"))
            {
                this.enc = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("type"))
            {
                this.type = _ItemType.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("lock"))
            {
                this.lock = _LockLevel.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("target"))
            {
                this.target = attributeValue;
            }
            else if (localName.equalsIgnoreCase("targettype"))
            {
                this.targettype = _ItemType.fromString(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("item"))
                {
                    this.item = new _ItemSpec();
                    this.item.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("vspec"))
                {
                    /*
                     * The element is an abstract type, so prepare to deserialize all the
                     * known derived types.
                     */
                    final String typeAttribute = reader.getAttributeValue(
                            Schemas.XSI,
                            "type");

                    if (typeAttribute == null)
                    {
                        throw new XMLStreamException(
                                "Element " + reader.getLocalName()
                                + " is for a derived type but did not include a type attribute");
                    }

                    if (typeAttribute.equals("ChangesetVersionSpec"))
                    {
                        this.vspec = new _ChangesetVersionSpec();
                    }
                    else if (typeAttribute.equals("DateVersionSpec"))
                    {
                        this.vspec = new _DateVersionSpec();
                    }
                    else if (typeAttribute.equals("LabelVersionSpec"))
                    {
                        this.vspec = new _LabelVersionSpec();
                    }
                    else if (typeAttribute.equals("LatestVersionSpec"))
                    {
                        this.vspec = new _LatestVersionSpec();
                    }
                    else if (typeAttribute.equals("WorkspaceVersionSpec"))
                    {
                        this.vspec = new _WorkspaceVersionSpec();
                    }

                    this.vspec.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Properties"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _PropertyValue complexObject0 = new _PropertyValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.properties = (_PropertyValue[]) list0.toArray(new _PropertyValue[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
