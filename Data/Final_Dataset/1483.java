// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.ws;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.ws._LocationMapping;
import ms.ws._ServiceDefinition;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ServiceDefinition
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String serviceType;
    protected String identifier;
    protected String displayName;
    protected int relativeToSetting;
    protected String relativePath;
    protected String description;
    protected String toolId;

    // Elements
    protected _LocationMapping[] locationMappings;

    public _ServiceDefinition()
    {
        super();
    }

    public _ServiceDefinition(
        final String serviceType,
        final String identifier,
        final String displayName,
        final int relativeToSetting,
        final String relativePath,
        final String description,
        final String toolId,
        final _LocationMapping[] locationMappings)
    {
        // TODO : Call super() instead of setting all fields directly?
        setServiceType(serviceType);
        setIdentifier(identifier);
        setDisplayName(displayName);
        setRelativeToSetting(relativeToSetting);
        setRelativePath(relativePath);
        setDescription(description);
        setToolId(toolId);
        setLocationMappings(locationMappings);
    }

    public String getServiceType()
    {
        return this.serviceType;
    }

    public void setServiceType(final String value)
    {
        this.serviceType = value;
    }

    public String getIdentifier()
    {
        return this.identifier;
    }

    public void setIdentifier(final String value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'identifier' is a required attribute, its value cannot be null");
        }

        this.identifier = value;
    }

    public String getDisplayName()
    {
        return this.displayName;
    }

    public void setDisplayName(final String value)
    {
        this.displayName = value;
    }

    public int getRelativeToSetting()
    {
        return this.relativeToSetting;
    }

    public void setRelativeToSetting(final int value)
    {
        this.relativeToSetting = value;
    }

    public String getRelativePath()
    {
        return this.relativePath;
    }

    public void setRelativePath(final String value)
    {
        this.relativePath = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(final String value)
    {
        this.description = value;
    }

    public String getToolId()
    {
        return this.toolId;
    }

    public void setToolId(final String value)
    {
        this.toolId = value;
    }

    public _LocationMapping[] getLocationMappings()
    {
        return this.locationMappings;
    }

    public void setLocationMappings(_LocationMapping[] value)
    {
        this.locationMappings = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "serviceType",
            this.serviceType);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "identifier",
            this.identifier);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "displayName",
            this.displayName);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "relativeToSetting",
            this.relativeToSetting);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "relativePath",
            this.relativePath);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "description",
            this.description);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "toolId",
            this.toolId);

        // Elements
        if (this.locationMappings != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("LocationMappings");

            for (int iterator0 = 0; iterator0 < this.locationMappings.length; iterator0++)
            {
                this.locationMappings[iterator0].writeAsElement(
                    writer,
                    "LocationMapping");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("serviceType"))
            {
                this.serviceType = attributeValue;
            }
            else if (localName.equalsIgnoreCase("identifier"))
            {
                this.identifier = attributeValue;
            }
            else if (localName.equalsIgnoreCase("displayName"))
            {
                this.displayName = attributeValue;
            }
            else if (localName.equalsIgnoreCase("relativeToSetting"))
            {
                this.relativeToSetting = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("relativePath"))
            {
                this.relativePath = attributeValue;
            }
            else if (localName.equalsIgnoreCase("description"))
            {
                this.description = attributeValue;
            }
            else if (localName.equalsIgnoreCase("toolId"))
            {
                this.toolId = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("LocationMappings"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _LocationMapping complexObject0 = new _LocationMapping();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.locationMappings = (_LocationMapping[]) list0.toArray(new _LocationMapping[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
