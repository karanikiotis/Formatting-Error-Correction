// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.services.groupsecurity._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.tfs.services.authorization._03._ApplicationGroupProperty;
import ms.tfs.services.authorization._03._ApplicationGroupSpecialType;
import ms.tfs.services.authorization._03._Identity;
import ms.tfs.services.authorization._03._IdentityType;
import ms.tfs.services.authorization._03._QueryMembership;
import ms.tfs.services.authorization._03._SearchFactor;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_AddMemberToApplicationGroup;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_AddMemberToApplicationGroupResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_CreateApplicationGroup;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_CreateApplicationGroupResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_DeleteApplicationGroup;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_DeleteApplicationGroupResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_GetChangedIdentities;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_GetChangedIdentitiesResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_IsIdentityCached;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_IsIdentityCachedResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_IsMember;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_IsMemberResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_ListApplicationGroups;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_ListApplicationGroupsResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_ReadIdentity;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_ReadIdentityFromSource;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_ReadIdentityFromSourceResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_ReadIdentityResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_RemoveMemberFromApplicationGroup;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_RemoveMemberFromApplicationGroupResponse;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_UpdateApplicationGroup;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_UpdateApplicationGroupResponse;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.String;

import java.net.URI;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/Services/GroupSecurity/03}GroupSecurityServiceSoap12Service
 */
public class _GroupSecurityServiceSoap12Service
    extends SOAP12Service
    implements _GroupSecurityServiceSoap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/Services/GroupSecurity/03",
                "GroupSecurityServiceSoap12Service");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/Services/v1.0/GroupSecurityService.asmx";

    public _GroupSecurityServiceSoap12Service(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _GroupSecurityServiceSoap12Service(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _GroupSecurityServiceSoap12Service.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _GroupSecurityServiceSoap12Service.ENDPOINT_PATH;
    }

    public _Identity readIdentity(
        final _SearchFactor factor,
        final String factorValue,
        final _QueryMembership queryMembership)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_ReadIdentity requestData = new _GroupSecurityServiceSoap_ReadIdentity(factor,
                factorValue, queryMembership);

        final SOAPRequest request = createSOAPRequest(
                "ReadIdentity",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ReadIdentity");
                    }
                });

        final _GroupSecurityServiceSoap_ReadIdentityResponse responseData = new _GroupSecurityServiceSoap_ReadIdentityResponse();

        executeSOAPRequest(
            request,
            "ReadIdentityResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReadIdentityResult();
    }

    public _Identity readIdentityFromSource(
        final _SearchFactor factor,
        final String factorValue)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_ReadIdentityFromSource requestData = new _GroupSecurityServiceSoap_ReadIdentityFromSource(
                    factor,
                    factorValue);

        final SOAPRequest request = createSOAPRequest(
                "ReadIdentityFromSource",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ReadIdentityFromSource");
                    }
                });

        final _GroupSecurityServiceSoap_ReadIdentityFromSourceResponse responseData = new _GroupSecurityServiceSoap_ReadIdentityFromSourceResponse();

        executeSOAPRequest(
            request,
            "ReadIdentityFromSourceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReadIdentityFromSourceResult();
    }

    public boolean isIdentityCached(
        final _SearchFactor factor,
        final String factorValue)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_IsIdentityCached requestData = new _GroupSecurityServiceSoap_IsIdentityCached(
                    factor,
                    factorValue);

        final SOAPRequest request = createSOAPRequest(
                "IsIdentityCached",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "IsIdentityCached");
                    }
                });

        final _GroupSecurityServiceSoap_IsIdentityCachedResponse responseData = new _GroupSecurityServiceSoap_IsIdentityCachedResponse();

        executeSOAPRequest(
            request,
            "IsIdentityCachedResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.isIsIdentityCachedResult();
    }

    public String getChangedIdentities(final int sequence_id)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_GetChangedIdentities requestData = new _GroupSecurityServiceSoap_GetChangedIdentities(
                    sequence_id);

        final SOAPRequest request = createSOAPRequest(
                "GetChangedIdentities",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetChangedIdentities");
                    }
                });

        final _GroupSecurityServiceSoap_GetChangedIdentitiesResponse responseData = new _GroupSecurityServiceSoap_GetChangedIdentitiesResponse();

        executeSOAPRequest(
            request,
            "GetChangedIdentitiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetChangedIdentitiesResult();
    }

    public String createApplicationGroup(
        final String projectUri,
        final String groupName,
        final String groupDescription)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_CreateApplicationGroup requestData = new _GroupSecurityServiceSoap_CreateApplicationGroup(
                    projectUri,
                    groupName,
                    groupDescription);

        final SOAPRequest request = createSOAPRequest(
                "CreateApplicationGroup",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateApplicationGroup");
                    }
                });

        final _GroupSecurityServiceSoap_CreateApplicationGroupResponse responseData = new _GroupSecurityServiceSoap_CreateApplicationGroupResponse();

        executeSOAPRequest(
            request,
            "CreateApplicationGroupResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCreateApplicationGroupResult();
    }

    public _Identity[] listApplicationGroups(final String projectUri)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_ListApplicationGroups requestData = new _GroupSecurityServiceSoap_ListApplicationGroups(
                    projectUri);

        final SOAPRequest request = createSOAPRequest(
                "ListApplicationGroups",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListApplicationGroups");
                    }
                });

        final _GroupSecurityServiceSoap_ListApplicationGroupsResponse responseData = new _GroupSecurityServiceSoap_ListApplicationGroupsResponse();

        executeSOAPRequest(
            request,
            "ListApplicationGroupsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListApplicationGroupsResult();
    }

    public void updateApplicationGroup(
        final String groupSid,
        final _ApplicationGroupProperty property,
        final String newValue)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_UpdateApplicationGroup requestData = new _GroupSecurityServiceSoap_UpdateApplicationGroup(
                    groupSid,
                    property,
                    newValue);

        final SOAPRequest request = createSOAPRequest(
                "UpdateApplicationGroup",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateApplicationGroup");
                    }
                });

        final _GroupSecurityServiceSoap_UpdateApplicationGroupResponse responseData = new _GroupSecurityServiceSoap_UpdateApplicationGroupResponse();

        executeSOAPRequest(
            request,
            "UpdateApplicationGroupResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteApplicationGroup(final String groupSid)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_DeleteApplicationGroup requestData = new _GroupSecurityServiceSoap_DeleteApplicationGroup(
                    groupSid);

        final SOAPRequest request = createSOAPRequest(
                "DeleteApplicationGroup",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteApplicationGroup");
                    }
                });

        final _GroupSecurityServiceSoap_DeleteApplicationGroupResponse responseData = new _GroupSecurityServiceSoap_DeleteApplicationGroupResponse();

        executeSOAPRequest(
            request,
            "DeleteApplicationGroupResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void addMemberToApplicationGroup(
        final String groupSid,
        final String identitySid)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_AddMemberToApplicationGroup requestData = new _GroupSecurityServiceSoap_AddMemberToApplicationGroup(
                    groupSid,
                    identitySid);

        final SOAPRequest request = createSOAPRequest(
                "AddMemberToApplicationGroup",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "AddMemberToApplicationGroup");
                    }
                });

        final _GroupSecurityServiceSoap_AddMemberToApplicationGroupResponse responseData = new _GroupSecurityServiceSoap_AddMemberToApplicationGroupResponse();

        executeSOAPRequest(
            request,
            "AddMemberToApplicationGroupResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void removeMemberFromApplicationGroup(
        final String groupSid,
        final String identitySid)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_RemoveMemberFromApplicationGroup requestData = new _GroupSecurityServiceSoap_RemoveMemberFromApplicationGroup(
                    groupSid,
                    identitySid);

        final SOAPRequest request = createSOAPRequest(
                "RemoveMemberFromApplicationGroup",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RemoveMemberFromApplicationGroup");
                    }
                });

        final _GroupSecurityServiceSoap_RemoveMemberFromApplicationGroupResponse responseData = new _GroupSecurityServiceSoap_RemoveMemberFromApplicationGroupResponse();

        executeSOAPRequest(
            request,
            "RemoveMemberFromApplicationGroupResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public boolean isMember(
        final String groupSid,
        final String identitySid)
        throws TransportException, SOAPFault
    {
        final _GroupSecurityServiceSoap_IsMember requestData = new _GroupSecurityServiceSoap_IsMember(groupSid,
                identitySid);

        final SOAPRequest request = createSOAPRequest(
                "IsMember",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "IsMember");
                    }
                });

        final _GroupSecurityServiceSoap_IsMemberResponse responseData = new _GroupSecurityServiceSoap_IsMemberResponse();

        executeSOAPRequest(
            request,
            "IsMemberResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.isIsMemberResult();
    }
}
