// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.tfs.versioncontrol.clientservices._03._AccessEntry;
import ms.tfs.versioncontrol.clientservices._03._Annotation;
import ms.tfs.versioncontrol.clientservices._03._BranchRelative;
import ms.tfs.versioncontrol.clientservices._03._Change;
import ms.tfs.versioncontrol.clientservices._03._ChangeRequest;
import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._Changeset;
import ms.tfs.versioncontrol.clientservices._03._ChangesetMerge;
import ms.tfs.versioncontrol.clientservices._03._ChangesetMergeDetails;
import ms.tfs.versioncontrol.clientservices._03._CheckinNote;
import ms.tfs.versioncontrol.clientservices._03._CheckinNoteFieldDefinition;
import ms.tfs.versioncontrol.clientservices._03._CheckinNoteFieldValue;
import ms.tfs.versioncontrol.clientservices._03._CheckinNotificationInfo;
import ms.tfs.versioncontrol.clientservices._03._CheckinNotificationWorkItemInfo;
import ms.tfs.versioncontrol.clientservices._03._CheckinOptions;
import ms.tfs.versioncontrol.clientservices._03._CheckinResult;
import ms.tfs.versioncontrol.clientservices._03._CheckinWorkItemAction;
import ms.tfs.versioncontrol.clientservices._03._Conflict;
import ms.tfs.versioncontrol.clientservices._03._ConflictInformation;
import ms.tfs.versioncontrol.clientservices._03._ConflictType;
import ms.tfs.versioncontrol.clientservices._03._DeletedState;
import ms.tfs.versioncontrol.clientservices._03._ExtendedItem;
import ms.tfs.versioncontrol.clientservices._03._Failure;
import ms.tfs.versioncontrol.clientservices._03._FileType;
import ms.tfs.versioncontrol.clientservices._03._GetOperation;
import ms.tfs.versioncontrol.clientservices._03._GetRequest;
import ms.tfs.versioncontrol.clientservices._03._GlobalSecurity;
import ms.tfs.versioncontrol.clientservices._03._Item;
import ms.tfs.versioncontrol.clientservices._03._ItemMerge;
import ms.tfs.versioncontrol.clientservices._03._ItemSecurity;
import ms.tfs.versioncontrol.clientservices._03._ItemSet;
import ms.tfs.versioncontrol.clientservices._03._ItemSpec;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LabelChildOption;
import ms.tfs.versioncontrol.clientservices._03._LabelItemSpec;
import ms.tfs.versioncontrol.clientservices._03._LabelResult;
import ms.tfs.versioncontrol.clientservices._03._LabelResultStatus;
import ms.tfs.versioncontrol.clientservices._03._LocalVersion;
import ms.tfs.versioncontrol.clientservices._03._LocalVersionUpdate;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._Mapping;
import ms.tfs.versioncontrol.clientservices._03._MergeCandidate;
import ms.tfs.versioncontrol.clientservices._03._MergeOptions;
import ms.tfs.versioncontrol.clientservices._03._MergeSource;
import ms.tfs.versioncontrol.clientservices._03._PendingChange;
import ms.tfs.versioncontrol.clientservices._03._PendingSet;
import ms.tfs.versioncontrol.clientservices._03._PendingSetType;
import ms.tfs.versioncontrol.clientservices._03._PendingState;
import ms.tfs.versioncontrol.clientservices._03._PermissionChange;
import ms.tfs.versioncontrol.clientservices._03._PolicyFailureInfo;
import ms.tfs.versioncontrol.clientservices._03._PolicyOverrideInfo;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;
import ms.tfs.versioncontrol.clientservices._03._RecursionType;
import ms.tfs.versioncontrol.clientservices._03._RepositoryProperties;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_AddConflict;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_AddConflictResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CheckAuthentication;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CheckAuthenticationResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CheckIn;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CheckInResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CheckPendingChanges;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CheckPendingChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateAnnotation;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateAnnotationResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateBranch;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateBranchResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateCheckinNoteDefinition;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateCheckinNoteDefinitionResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateTeamProjectFolder;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateTeamProjectFolderResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateWorkspace;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_CreateWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteAnnotation;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteAnnotationResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteLabel;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteLabelResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteShelveset;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteShelvesetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteWorkspace;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DeleteWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_Destroy;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_DestroyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_Get;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_GetRepositoryProperties;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_GetRepositoryPropertiesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_GetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_LabelItem;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_LabelItemResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_Merge;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_MergeResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_PendChanges;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_PendChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryAnnotation;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryAnnotationResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryBranches;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryBranchesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryChangesForChangeset;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryChangesForChangesetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryChangeset;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryChangesetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryCheckinNoteDefinition;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryCheckinNoteDefinitionResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryCheckinNoteFieldNames;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryCheckinNoteFieldNamesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryConflicts;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryConflictsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryEffectiveGlobalPermissions;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryEffectiveGlobalPermissionsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryEffectiveItemPermissions;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryEffectiveItemPermissionsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryFileTypes;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryFileTypesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryGlobalPermissions;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryGlobalPermissionsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryHistory;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryHistoryResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItemPermissions;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItemPermissionsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItems;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItemsById;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItemsByIdResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItemsExtended;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItemsExtendedResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryItemsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryLabels;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryLabelsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryLocalVersions;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryLocalVersionsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryMergeCandidates;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryMergeCandidatesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryMerges;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryMergesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryMergesWithDetails;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryMergesWithDetailsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryPendingChangesById;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryPendingChangesByIdResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryPendingChangesForWorkspace;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryPendingChangesForWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryPendingSets;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryPendingSetsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryShelvedChanges;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryShelvedChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryShelvesets;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryShelvesetsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryWorkspace;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryWorkspaces;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryWorkspacesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_RefreshIdentityDisplayName;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_RefreshIdentityDisplayNameResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_RemoveLocalConflict;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_RemoveLocalConflictResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_Resolve;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_ResolveResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_SetFileTypes;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_SetFileTypesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_Shelve;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_ShelveResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UndoPendingChanges;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UndoPendingChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UnlabelItem;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UnlabelItemResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_Unshelve;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UnshelveResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateChangeset;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateChangesetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateCheckinNoteFieldName;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateCheckinNoteFieldNameResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateGlobalSecurity;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateGlobalSecurityResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateItemSecurity;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateItemSecurityResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateLocalVersion;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateLocalVersionResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdatePendingState;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdatePendingStateResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateWorkspace;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_UpdateWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._RequestType;
import ms.tfs.versioncontrol.clientservices._03._Resolution;
import ms.tfs.versioncontrol.clientservices._03._SecurityChange;
import ms.tfs.versioncontrol.clientservices._03._SeverityType;
import ms.tfs.versioncontrol.clientservices._03._Shelveset;
import ms.tfs.versioncontrol.clientservices._03._TeamProjectFolderOptions;
import ms.tfs.versioncontrol.clientservices._03._TeamProjectFolderPermission;
import ms.tfs.versioncontrol.clientservices._03._VersionControlLabel;
import ms.tfs.versioncontrol.clientservices._03._VersionControlLink;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;
import ms.tfs.versioncontrol.clientservices._03._Warning;
import ms.tfs.versioncontrol.clientservices._03._WarningType;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolder;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolderType;
import ms.tfs.versioncontrol.clientservices._03._Workspace;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.Object;
import java.lang.String;

import java.net.URI;

import java.util.Calendar;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices/03}RepositorySoapService
 */
public class _RepositorySoapService
    extends SOAP11Service
    implements _RepositorySoap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices/03",
                "RepositorySoapService");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/VersionControl/v1.0/Repository.asmx";

    public _RepositorySoapService(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _RepositorySoapService(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _RepositorySoapService.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _RepositorySoapService.ENDPOINT_PATH;
    }

    public void addConflict(
        final String workspaceName,
        final String ownerName,
        final _ConflictType conflictType,
        final int itemId,
        final int versionFrom,
        final int pendingChangeId,
        final String sourceLocalItem,
        final String targetLocalItem,
        final int reason)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_AddConflict requestData = new _RepositorySoap_AddConflict(workspaceName, ownerName,
                conflictType, itemId, versionFrom, pendingChangeId, sourceLocalItem, targetLocalItem, reason);

        final SOAPRequest request = createSOAPRequest(
                "AddConflict",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "AddConflict");
                    }
                });

        final _RepositorySoap_AddConflictResponse responseData = new _RepositorySoap_AddConflictResponse();

        executeSOAPRequest(
            request,
            "AddConflictResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public String checkAuthentication()
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CheckAuthentication requestData = new _RepositorySoap_CheckAuthentication();

        final SOAPRequest request = createSOAPRequest(
                "CheckAuthentication",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckAuthentication");
                    }
                });

        final _RepositorySoap_CheckAuthenticationResponse responseData = new _RepositorySoap_CheckAuthenticationResponse();

        executeSOAPRequest(
            request,
            "CheckAuthenticationResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCheckAuthenticationResult();
    }

    public _RepositorySoap_CheckInResponse checkIn(
        final String workspaceName,
        final String ownerName,
        final String[] serverItems,
        final _Changeset info,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final _CheckinOptions checkinOptions,
        final boolean deferCheckIn,
        final int checkInTicket)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CheckIn requestData = new _RepositorySoap_CheckIn(workspaceName, ownerName, serverItems,
                info, checkinNotificationInfo, checkinOptions, deferCheckIn, checkInTicket);

        final SOAPRequest request = createSOAPRequest(
                "CheckIn",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckIn");
                    }
                });

        final _RepositorySoap_CheckInResponse responseData = new _RepositorySoap_CheckInResponse();

        executeSOAPRequest(
            request,
            "CheckInResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Failure[] checkPendingChanges(
        final String workspaceName,
        final String ownerName,
        final String[] serverItems)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CheckPendingChanges requestData = new _RepositorySoap_CheckPendingChanges(workspaceName,
                ownerName, serverItems);

        final SOAPRequest request = createSOAPRequest(
                "CheckPendingChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckPendingChanges");
                    }
                });

        final _RepositorySoap_CheckPendingChangesResponse responseData = new _RepositorySoap_CheckPendingChangesResponse();

        executeSOAPRequest(
            request,
            "CheckPendingChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCheckPendingChangesResult();
    }

    public void createAnnotation(
        final String annotationName,
        final String annotatedItem,
        final int version,
        final String annotationValue,
        final String comment,
        final boolean overwrite)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CreateAnnotation requestData = new _RepositorySoap_CreateAnnotation(annotationName,
                annotatedItem, version, annotationValue, comment, overwrite);

        final SOAPRequest request = createSOAPRequest(
                "CreateAnnotation",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateAnnotation");
                    }
                });

        final _RepositorySoap_CreateAnnotationResponse responseData = new _RepositorySoap_CreateAnnotationResponse();

        executeSOAPRequest(
            request,
            "CreateAnnotationResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void createCheckinNoteDefinition(
        final String associatedServerItem,
        final _CheckinNoteFieldDefinition[] checkinNoteFields)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CreateCheckinNoteDefinition requestData = new _RepositorySoap_CreateCheckinNoteDefinition(
                    associatedServerItem,
                    checkinNoteFields);

        final SOAPRequest request = createSOAPRequest(
                "CreateCheckinNoteDefinition",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateCheckinNoteDefinition");
                    }
                });

        final _RepositorySoap_CreateCheckinNoteDefinitionResponse responseData = new _RepositorySoap_CreateCheckinNoteDefinitionResponse();

        executeSOAPRequest(
            request,
            "CreateCheckinNoteDefinitionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Workspace createWorkspace(final _Workspace workspace)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CreateWorkspace requestData = new _RepositorySoap_CreateWorkspace(workspace);

        final SOAPRequest request = createSOAPRequest(
                "CreateWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateWorkspace");
                    }
                });

        final _RepositorySoap_CreateWorkspaceResponse responseData = new _RepositorySoap_CreateWorkspaceResponse();

        executeSOAPRequest(
            request,
            "CreateWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCreateWorkspaceResult();
    }

    public void deleteAnnotation(
        final String annotationName,
        final String annotatedItem,
        final int version,
        final String annotationValue)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_DeleteAnnotation requestData = new _RepositorySoap_DeleteAnnotation(annotationName,
                annotatedItem, version, annotationValue);

        final SOAPRequest request = createSOAPRequest(
                "DeleteAnnotation",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteAnnotation");
                    }
                });

        final _RepositorySoap_DeleteAnnotationResponse responseData = new _RepositorySoap_DeleteAnnotationResponse();

        executeSOAPRequest(
            request,
            "DeleteAnnotationResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _LabelResult[] deleteLabel(
        final String labelName,
        final String labelScope)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_DeleteLabel requestData = new _RepositorySoap_DeleteLabel(labelName, labelScope);

        final SOAPRequest request = createSOAPRequest(
                "DeleteLabel",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteLabel");
                    }
                });

        final _RepositorySoap_DeleteLabelResponse responseData = new _RepositorySoap_DeleteLabelResponse();

        executeSOAPRequest(
            request,
            "DeleteLabelResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDeleteLabelResult();
    }

    public void deleteShelveset(
        final String shelvesetName,
        final String ownerName)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_DeleteShelveset requestData = new _RepositorySoap_DeleteShelveset(shelvesetName, ownerName);

        final SOAPRequest request = createSOAPRequest(
                "DeleteShelveset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteShelveset");
                    }
                });

        final _RepositorySoap_DeleteShelvesetResponse responseData = new _RepositorySoap_DeleteShelvesetResponse();

        executeSOAPRequest(
            request,
            "DeleteShelvesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteWorkspace(
        final String workspaceName,
        final String ownerName)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_DeleteWorkspace requestData = new _RepositorySoap_DeleteWorkspace(workspaceName, ownerName);

        final SOAPRequest request = createSOAPRequest(
                "DeleteWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteWorkspace");
                    }
                });

        final _RepositorySoap_DeleteWorkspaceResponse responseData = new _RepositorySoap_DeleteWorkspaceResponse();

        executeSOAPRequest(
            request,
            "DeleteWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _RepositorySoap_DestroyResponse destroy(
        final _ItemSpec item,
        final _VersionSpec versionSpec,
        final _VersionSpec stopAtSpec,
        final int flags)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_Destroy requestData = new _RepositorySoap_Destroy(item, versionSpec, stopAtSpec, flags);

        final SOAPRequest request = createSOAPRequest(
                "Destroy",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Destroy");
                    }
                });

        final _RepositorySoap_DestroyResponse responseData = new _RepositorySoap_DestroyResponse();

        executeSOAPRequest(
            request,
            "DestroyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _GetOperation[][] get(
        final String workspaceName,
        final String ownerName,
        final _GetRequest[] requests,
        final boolean force,
        final boolean noGet,
        final int maxResults,
        final int options)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_Get requestData = new _RepositorySoap_Get(workspaceName, ownerName, requests, force,
                noGet, maxResults, options);

        final SOAPRequest request = createSOAPRequest(
                "Get",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Get");
                    }
                });

        final _RepositorySoap_GetResponse responseData = new _RepositorySoap_GetResponse();

        executeSOAPRequest(
            request,
            "GetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetResult();
    }

    public _RepositoryProperties getRepositoryProperties()
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_GetRepositoryProperties requestData = new _RepositorySoap_GetRepositoryProperties();

        final SOAPRequest request = createSOAPRequest(
                "GetRepositoryProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetRepositoryProperties");
                    }
                });

        final _RepositorySoap_GetRepositoryPropertiesResponse responseData = new _RepositorySoap_GetRepositoryPropertiesResponse();

        executeSOAPRequest(
            request,
            "GetRepositoryPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetRepositoryPropertiesResult();
    }

    public _RepositorySoap_LabelItemResponse labelItem(
        final String workspaceName,
        final String workspaceOwner,
        final _VersionControlLabel label,
        final _LabelItemSpec[] labelSpecs,
        final _LabelChildOption children)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_LabelItem requestData = new _RepositorySoap_LabelItem(workspaceName, workspaceOwner,
                label, labelSpecs, children);

        final SOAPRequest request = createSOAPRequest(
                "LabelItem",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "LabelItem");
                    }
                });

        final _RepositorySoap_LabelItemResponse responseData = new _RepositorySoap_LabelItemResponse();

        executeSOAPRequest(
            request,
            "LabelItemResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositorySoap_MergeResponse merge(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _ItemSpec target,
        final _VersionSpec from,
        final _VersionSpec to,
        final _MergeOptions options,
        final _LockLevel lockLevel,
        final int optionsEx)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_Merge requestData = new _RepositorySoap_Merge(workspaceName, workspaceOwner, source,
                target, from, to, options, lockLevel, optionsEx);

        final SOAPRequest request = createSOAPRequest(
                "Merge",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Merge");
                    }
                });

        final _RepositorySoap_MergeResponse responseData = new _RepositorySoap_MergeResponse();

        executeSOAPRequest(
            request,
            "MergeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositorySoap_PendChangesResponse pendChanges(
        final String workspaceName,
        final String ownerName,
        final _ChangeRequest[] changes,
        final int pendChangesOptions,
        final int supportedFeatures)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_PendChanges requestData = new _RepositorySoap_PendChanges(workspaceName, ownerName,
                changes, pendChangesOptions, supportedFeatures);

        final SOAPRequest request = createSOAPRequest(
                "PendChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "PendChanges");
                    }
                });

        final _RepositorySoap_PendChangesResponse responseData = new _RepositorySoap_PendChangesResponse();

        executeSOAPRequest(
            request,
            "PendChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Annotation[] queryAnnotation(
        final String annotationName,
        final String annotatedItem,
        final int version)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryAnnotation requestData = new _RepositorySoap_QueryAnnotation(annotationName,
                annotatedItem, version);

        final SOAPRequest request = createSOAPRequest(
                "QueryAnnotation",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryAnnotation");
                    }
                });

        final _RepositorySoap_QueryAnnotationResponse responseData = new _RepositorySoap_QueryAnnotationResponse();

        executeSOAPRequest(
            request,
            "QueryAnnotationResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryAnnotationResult();
    }

    public _BranchRelative[][] queryBranches(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _VersionSpec version)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryBranches requestData = new _RepositorySoap_QueryBranches(workspaceName,
                workspaceOwner, items, version);

        final SOAPRequest request = createSOAPRequest(
                "QueryBranches",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryBranches");
                    }
                });

        final _RepositorySoap_QueryBranchesResponse responseData = new _RepositorySoap_QueryBranchesResponse();

        executeSOAPRequest(
            request,
            "QueryBranchesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryBranchesResult();
    }

    public _Changeset queryChangeset(
        final int changesetId,
        final boolean includeChanges,
        final boolean generateDownloadUrls,
        final boolean includeSourceRenames)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryChangeset requestData = new _RepositorySoap_QueryChangeset(changesetId,
                includeChanges, generateDownloadUrls, includeSourceRenames);

        final SOAPRequest request = createSOAPRequest(
                "QueryChangeset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryChangeset");
                    }
                });

        final _RepositorySoap_QueryChangesetResponse responseData = new _RepositorySoap_QueryChangesetResponse();

        executeSOAPRequest(
            request,
            "QueryChangesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryChangesetResult();
    }

    public _Change[] queryChangesForChangeset(
        final int changesetId,
        final boolean generateDownloadUrls,
        final int pageSize,
        final _ItemSpec lastItem)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryChangesForChangeset requestData = new _RepositorySoap_QueryChangesForChangeset(
                    changesetId,
                    generateDownloadUrls,
                    pageSize,
                    lastItem);

        final SOAPRequest request = createSOAPRequest(
                "QueryChangesForChangeset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryChangesForChangeset");
                    }
                });

        final _RepositorySoap_QueryChangesForChangesetResponse responseData = new _RepositorySoap_QueryChangesForChangesetResponse();

        executeSOAPRequest(
            request,
            "QueryChangesForChangesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryChangesForChangesetResult();
    }

    public _CheckinNoteFieldDefinition[] queryCheckinNoteDefinition(final String[] associatedServerItem)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryCheckinNoteDefinition requestData = new _RepositorySoap_QueryCheckinNoteDefinition(
                    associatedServerItem);

        final SOAPRequest request = createSOAPRequest(
                "QueryCheckinNoteDefinition",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryCheckinNoteDefinition");
                    }
                });

        final _RepositorySoap_QueryCheckinNoteDefinitionResponse responseData = new _RepositorySoap_QueryCheckinNoteDefinitionResponse();

        executeSOAPRequest(
            request,
            "QueryCheckinNoteDefinitionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryCheckinNoteDefinitionResult();
    }

    public String[] queryCheckinNoteFieldNames()
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryCheckinNoteFieldNames requestData = new _RepositorySoap_QueryCheckinNoteFieldNames();

        final SOAPRequest request = createSOAPRequest(
                "QueryCheckinNoteFieldNames",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryCheckinNoteFieldNames");
                    }
                });

        final _RepositorySoap_QueryCheckinNoteFieldNamesResponse responseData = new _RepositorySoap_QueryCheckinNoteFieldNamesResponse();

        executeSOAPRequest(
            request,
            "QueryCheckinNoteFieldNamesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryCheckinNoteFieldNamesResult();
    }

    public _Conflict[] queryConflicts(
        final String workspaceName,
        final String ownerName,
        final _ItemSpec[] items)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryConflicts requestData = new _RepositorySoap_QueryConflicts(workspaceName, ownerName,
                items);

        final SOAPRequest request = createSOAPRequest(
                "QueryConflicts",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryConflicts");
                    }
                });

        final _RepositorySoap_QueryConflictsResponse responseData = new _RepositorySoap_QueryConflictsResponse();

        executeSOAPRequest(
            request,
            "QueryConflictsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryConflictsResult();
    }

    public String[] queryEffectiveGlobalPermissions(final String identityName)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryEffectiveGlobalPermissions requestData = new _RepositorySoap_QueryEffectiveGlobalPermissions(
                    identityName);

        final SOAPRequest request = createSOAPRequest(
                "QueryEffectiveGlobalPermissions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryEffectiveGlobalPermissions");
                    }
                });

        final _RepositorySoap_QueryEffectiveGlobalPermissionsResponse responseData = new _RepositorySoap_QueryEffectiveGlobalPermissionsResponse();

        executeSOAPRequest(
            request,
            "QueryEffectiveGlobalPermissionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryEffectiveGlobalPermissionsResult();
    }

    public String[] queryEffectiveItemPermissions(
        final String workspaceName,
        final String workspaceOwner,
        final String item,
        final String identityName)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryEffectiveItemPermissions requestData = new _RepositorySoap_QueryEffectiveItemPermissions(
                    workspaceName,
                    workspaceOwner,
                    item,
                    identityName);

        final SOAPRequest request = createSOAPRequest(
                "QueryEffectiveItemPermissions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryEffectiveItemPermissions");
                    }
                });

        final _RepositorySoap_QueryEffectiveItemPermissionsResponse responseData = new _RepositorySoap_QueryEffectiveItemPermissionsResponse();

        executeSOAPRequest(
            request,
            "QueryEffectiveItemPermissionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryEffectiveItemPermissionsResult();
    }

    public _FileType[] queryFileTypes()
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryFileTypes requestData = new _RepositorySoap_QueryFileTypes();

        final SOAPRequest request = createSOAPRequest(
                "QueryFileTypes",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryFileTypes");
                    }
                });

        final _RepositorySoap_QueryFileTypesResponse responseData = new _RepositorySoap_QueryFileTypesResponse();

        executeSOAPRequest(
            request,
            "QueryFileTypesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryFileTypesResult();
    }

    public _GlobalSecurity queryGlobalPermissions(final String[] identityNames)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryGlobalPermissions requestData = new _RepositorySoap_QueryGlobalPermissions(
                    identityNames);

        final SOAPRequest request = createSOAPRequest(
                "QueryGlobalPermissions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryGlobalPermissions");
                    }
                });

        final _RepositorySoap_QueryGlobalPermissionsResponse responseData = new _RepositorySoap_QueryGlobalPermissionsResponse();

        executeSOAPRequest(
            request,
            "QueryGlobalPermissionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryGlobalPermissionsResult();
    }

    public _Changeset[] queryHistory(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec itemSpec,
        final _VersionSpec versionItem,
        final String user,
        final _VersionSpec versionFrom,
        final _VersionSpec versionTo,
        final int maxCount,
        final boolean includeFiles,
        final boolean generateDownloadUrls,
        final boolean slotMode,
        final boolean sortAscending)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryHistory requestData = new _RepositorySoap_QueryHistory(workspaceName,
                workspaceOwner, itemSpec, versionItem, user, versionFrom, versionTo, maxCount, includeFiles,
                generateDownloadUrls, slotMode, sortAscending);

        final SOAPRequest request = createSOAPRequest(
                "QueryHistory",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryHistory");
                    }
                });

        final _RepositorySoap_QueryHistoryResponse responseData = new _RepositorySoap_QueryHistoryResponse();

        executeSOAPRequest(
            request,
            "QueryHistoryResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryHistoryResult();
    }

    public _ItemSet[] queryItems(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _VersionSpec version,
        final _DeletedState deletedState,
        final _ItemType itemType,
        final boolean generateDownloadUrls,
        final int options)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryItems requestData = new _RepositorySoap_QueryItems(workspaceName, workspaceOwner,
                items, version, deletedState, itemType, generateDownloadUrls, options);

        final SOAPRequest request = createSOAPRequest(
                "QueryItems",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryItems");
                    }
                });

        final _RepositorySoap_QueryItemsResponse responseData = new _RepositorySoap_QueryItemsResponse();

        executeSOAPRequest(
            request,
            "QueryItemsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryItemsResult();
    }

    public _LocalVersion[][] queryLocalVersions(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] itemSpecs)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryLocalVersions requestData = new _RepositorySoap_QueryLocalVersions(workspaceName,
                workspaceOwner, itemSpecs);

        final SOAPRequest request = createSOAPRequest(
                "QueryLocalVersions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryLocalVersions");
                    }
                });

        final _RepositorySoap_QueryLocalVersionsResponse responseData = new _RepositorySoap_QueryLocalVersionsResponse();

        executeSOAPRequest(
            request,
            "QueryLocalVersionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryLocalVersionsResult();
    }

    public _ExtendedItem[][] queryItemsExtended(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _DeletedState deletedState,
        final _ItemType itemType,
        final int options)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryItemsExtended requestData = new _RepositorySoap_QueryItemsExtended(workspaceName,
                workspaceOwner, items, deletedState, itemType, options);

        final SOAPRequest request = createSOAPRequest(
                "QueryItemsExtended",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryItemsExtended");
                    }
                });

        final _RepositorySoap_QueryItemsExtendedResponse responseData = new _RepositorySoap_QueryItemsExtendedResponse();

        executeSOAPRequest(
            request,
            "QueryItemsExtendedResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryItemsExtendedResult();
    }

    public _RepositorySoap_QueryItemPermissionsResponse queryItemPermissions(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] itemSpecs,
        final String[] identityNames)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryItemPermissions requestData = new _RepositorySoap_QueryItemPermissions(workspaceName,
                workspaceOwner,
                itemSpecs,
                identityNames);

        final SOAPRequest request = createSOAPRequest(
                "QueryItemPermissions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryItemPermissions");
                    }
                });

        final _RepositorySoap_QueryItemPermissionsResponse responseData = new _RepositorySoap_QueryItemPermissionsResponse();

        executeSOAPRequest(
            request,
            "QueryItemPermissionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _VersionControlLabel[] queryLabels(
        final String workspaceName,
        final String workspaceOwner,
        final String labelName,
        final String labelScope,
        final String owner,
        final String filterItem,
        final _VersionSpec versionFilterItem,
        final boolean includeItems,
        final boolean generateDownloadUrls)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryLabels requestData = new _RepositorySoap_QueryLabels(workspaceName, workspaceOwner,
                labelName, labelScope, owner, filterItem, versionFilterItem, includeItems, generateDownloadUrls);

        final SOAPRequest request = createSOAPRequest(
                "QueryLabels",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryLabels");
                    }
                });

        final _RepositorySoap_QueryLabelsResponse responseData = new _RepositorySoap_QueryLabelsResponse();

        executeSOAPRequest(
            request,
            "QueryLabelsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryLabelsResult();
    }

    public _MergeCandidate[] queryMergeCandidates(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _ItemSpec target,
        final int options)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryMergeCandidates requestData = new _RepositorySoap_QueryMergeCandidates(workspaceName,
                workspaceOwner,
                source,
                target,
                options);

        final SOAPRequest request = createSOAPRequest(
                "QueryMergeCandidates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryMergeCandidates");
                    }
                });

        final _RepositorySoap_QueryMergeCandidatesResponse responseData = new _RepositorySoap_QueryMergeCandidatesResponse();

        executeSOAPRequest(
            request,
            "QueryMergeCandidatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryMergeCandidatesResult();
    }

    public _RepositorySoap_QueryMergesResponse queryMerges(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _VersionSpec versionSource,
        final _ItemSpec target,
        final _VersionSpec versionTarget,
        final _VersionSpec versionFrom,
        final _VersionSpec versionTo,
        final int maxChangesets,
        final boolean showAll)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryMerges requestData = new _RepositorySoap_QueryMerges(workspaceName, workspaceOwner,
                source, versionSource, target, versionTarget, versionFrom, versionTo, maxChangesets, showAll);

        final SOAPRequest request = createSOAPRequest(
                "QueryMerges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryMerges");
                    }
                });

        final _RepositorySoap_QueryMergesResponse responseData = new _RepositorySoap_QueryMergesResponse();

        executeSOAPRequest(
            request,
            "QueryMergesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ChangesetMergeDetails queryMergesWithDetails(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _VersionSpec versionSource,
        final _ItemSpec target,
        final _VersionSpec versionTarget,
        final _VersionSpec versionFrom,
        final _VersionSpec versionTo,
        final int maxChangesets,
        final boolean showAll)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryMergesWithDetails requestData = new _RepositorySoap_QueryMergesWithDetails(
                    workspaceName,
                    workspaceOwner,
                    source,
                    versionSource,
                    target,
                    versionTarget,
                    versionFrom,
                    versionTo,
                    maxChangesets,
                    showAll);

        final SOAPRequest request = createSOAPRequest(
                "QueryMergesWithDetails",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryMergesWithDetails");
                    }
                });

        final _RepositorySoap_QueryMergesWithDetailsResponse responseData = new _RepositorySoap_QueryMergesWithDetailsResponse();

        executeSOAPRequest(
            request,
            "QueryMergesWithDetailsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryMergesWithDetailsResult();
    }

    public _RepositorySoap_QueryPendingSetsResponse queryPendingSets(
        final String localWorkspaceName,
        final String localWorkspaceOwner,
        final String queryWorkspaceName,
        final String ownerName,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryPendingSets requestData = new _RepositorySoap_QueryPendingSets(localWorkspaceName,
                localWorkspaceOwner, queryWorkspaceName, ownerName, itemSpecs, generateDownloadUrls);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingSets",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingSets");
                    }
                });

        final _RepositorySoap_QueryPendingSetsResponse responseData = new _RepositorySoap_QueryPendingSetsResponse();

        executeSOAPRequest(
            request,
            "QueryPendingSetsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositorySoap_QueryPendingChangesForWorkspaceResponse queryPendingChangesForWorkspace(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final int pageSize,
        final String lastChange)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryPendingChangesForWorkspace requestData = new _RepositorySoap_QueryPendingChangesForWorkspace(
                    workspaceName,
                    workspaceOwner,
                    itemSpecs,
                    generateDownloadUrls,
                    pageSize,
                    lastChange);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingChangesForWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingChangesForWorkspace");
                    }
                });

        final _RepositorySoap_QueryPendingChangesForWorkspaceResponse responseData = new _RepositorySoap_QueryPendingChangesForWorkspaceResponse();

        executeSOAPRequest(
            request,
            "QueryPendingChangesForWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositorySoap_QueryShelvedChangesResponse queryShelvedChanges(
        final String localWorkspaceName,
        final String localWorkspaceOwner,
        final String shelvesetName,
        final String ownerName,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryShelvedChanges requestData = new _RepositorySoap_QueryShelvedChanges(localWorkspaceName,
                localWorkspaceOwner,
                shelvesetName,
                ownerName,
                itemSpecs,
                generateDownloadUrls);

        final SOAPRequest request = createSOAPRequest(
                "QueryShelvedChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryShelvedChanges");
                    }
                });

        final _RepositorySoap_QueryShelvedChangesResponse responseData = new _RepositorySoap_QueryShelvedChangesResponse();

        executeSOAPRequest(
            request,
            "QueryShelvedChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Shelveset[] queryShelvesets(
        final String shelvesetName,
        final String ownerName)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryShelvesets requestData = new _RepositorySoap_QueryShelvesets(shelvesetName, ownerName);

        final SOAPRequest request = createSOAPRequest(
                "QueryShelvesets",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryShelvesets");
                    }
                });

        final _RepositorySoap_QueryShelvesetsResponse responseData = new _RepositorySoap_QueryShelvesetsResponse();

        executeSOAPRequest(
            request,
            "QueryShelvesetsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryShelvesetsResult();
    }

    public _Workspace queryWorkspace(
        final String workspaceName,
        final String ownerName)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryWorkspace requestData = new _RepositorySoap_QueryWorkspace(workspaceName, ownerName);

        final SOAPRequest request = createSOAPRequest(
                "QueryWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryWorkspace");
                    }
                });

        final _RepositorySoap_QueryWorkspaceResponse responseData = new _RepositorySoap_QueryWorkspaceResponse();

        executeSOAPRequest(
            request,
            "QueryWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryWorkspaceResult();
    }

    public _Workspace[] queryWorkspaces(
        final String ownerName,
        final String computer,
        final int permissionsFilter)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryWorkspaces requestData = new _RepositorySoap_QueryWorkspaces(ownerName, computer,
                permissionsFilter);

        final SOAPRequest request = createSOAPRequest(
                "QueryWorkspaces",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryWorkspaces");
                    }
                });

        final _RepositorySoap_QueryWorkspacesResponse responseData = new _RepositorySoap_QueryWorkspacesResponse();

        executeSOAPRequest(
            request,
            "QueryWorkspacesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryWorkspacesResult();
    }

    public void refreshIdentityDisplayName()
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_RefreshIdentityDisplayName requestData = new _RepositorySoap_RefreshIdentityDisplayName();

        final SOAPRequest request = createSOAPRequest(
                "RefreshIdentityDisplayName",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RefreshIdentityDisplayName");
                    }
                });

        final _RepositorySoap_RefreshIdentityDisplayNameResponse responseData = new _RepositorySoap_RefreshIdentityDisplayNameResponse();

        executeSOAPRequest(
            request,
            "RefreshIdentityDisplayNameResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void removeLocalConflict(
        final String workspaceName,
        final String ownerName,
        final int conflictId)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_RemoveLocalConflict requestData = new _RepositorySoap_RemoveLocalConflict(workspaceName,
                ownerName, conflictId);

        final SOAPRequest request = createSOAPRequest(
                "RemoveLocalConflict",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RemoveLocalConflict");
                    }
                });

        final _RepositorySoap_RemoveLocalConflictResponse responseData = new _RepositorySoap_RemoveLocalConflictResponse();

        executeSOAPRequest(
            request,
            "RemoveLocalConflictResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _RepositorySoap_ResolveResponse resolve(
        final String workspaceName,
        final String ownerName,
        final int conflictId,
        final _Resolution resolution,
        final String newPath,
        final int encoding,
        final _LockLevel lockLevel)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_Resolve requestData = new _RepositorySoap_Resolve(workspaceName, ownerName, conflictId,
                resolution, newPath, encoding, lockLevel);

        final SOAPRequest request = createSOAPRequest(
                "Resolve",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Resolve");
                    }
                });

        final _RepositorySoap_ResolveResponse responseData = new _RepositorySoap_ResolveResponse();

        executeSOAPRequest(
            request,
            "ResolveResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setFileTypes(final _FileType[] fileTypes)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_SetFileTypes requestData = new _RepositorySoap_SetFileTypes(fileTypes);

        final SOAPRequest request = createSOAPRequest(
                "SetFileTypes",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetFileTypes");
                    }
                });

        final _RepositorySoap_SetFileTypesResponse responseData = new _RepositorySoap_SetFileTypesResponse();

        executeSOAPRequest(
            request,
            "SetFileTypesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Failure[] shelve(
        final String workspaceName,
        final String workspaceOwner,
        final String[] serverItems,
        final _Shelveset shelveset,
        final boolean replace)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_Shelve requestData = new _RepositorySoap_Shelve(workspaceName, workspaceOwner,
                serverItems, shelveset, replace);

        final SOAPRequest request = createSOAPRequest(
                "Shelve",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Shelve");
                    }
                });

        final _RepositorySoap_ShelveResponse responseData = new _RepositorySoap_ShelveResponse();

        executeSOAPRequest(
            request,
            "ShelveResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getShelveResult();
    }

    public _RepositorySoap_UndoPendingChangesResponse undoPendingChanges(
        final String workspaceName,
        final String ownerName,
        final _ItemSpec[] items)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UndoPendingChanges requestData = new _RepositorySoap_UndoPendingChanges(workspaceName,
                ownerName, items);

        final SOAPRequest request = createSOAPRequest(
                "UndoPendingChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UndoPendingChanges");
                    }
                });

        final _RepositorySoap_UndoPendingChangesResponse responseData = new _RepositorySoap_UndoPendingChangesResponse();

        executeSOAPRequest(
            request,
            "UndoPendingChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositorySoap_UnlabelItemResponse unlabelItem(
        final String workspaceName,
        final String workspaceOwner,
        final String labelName,
        final String labelScope,
        final _ItemSpec[] items,
        final _VersionSpec version)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UnlabelItem requestData = new _RepositorySoap_UnlabelItem(workspaceName, workspaceOwner,
                labelName, labelScope, items, version);

        final SOAPRequest request = createSOAPRequest(
                "UnlabelItem",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UnlabelItem");
                    }
                });

        final _RepositorySoap_UnlabelItemResponse responseData = new _RepositorySoap_UnlabelItemResponse();

        executeSOAPRequest(
            request,
            "UnlabelItemResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositorySoap_UnshelveResponse unshelve(
        final String shelvesetName,
        final String shelvesetOwner,
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_Unshelve requestData = new _RepositorySoap_Unshelve(shelvesetName, shelvesetOwner,
                workspaceName, workspaceOwner, items);

        final SOAPRequest request = createSOAPRequest(
                "Unshelve",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Unshelve");
                    }
                });

        final _RepositorySoap_UnshelveResponse responseData = new _RepositorySoap_UnshelveResponse();

        executeSOAPRequest(
            request,
            "UnshelveResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void updateChangeset(
        final int changeset,
        final String comment,
        final _CheckinNote checkinNote)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UpdateChangeset requestData = new _RepositorySoap_UpdateChangeset(changeset, comment,
                checkinNote);

        final SOAPRequest request = createSOAPRequest(
                "UpdateChangeset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateChangeset");
                    }
                });

        final _RepositorySoap_UpdateChangesetResponse responseData = new _RepositorySoap_UpdateChangesetResponse();

        executeSOAPRequest(
            request,
            "UpdateChangesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void updateCheckinNoteFieldName(
        final String path,
        final String existingFieldName,
        final String newFieldName)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UpdateCheckinNoteFieldName requestData = new _RepositorySoap_UpdateCheckinNoteFieldName(path,
                existingFieldName,
                newFieldName);

        final SOAPRequest request = createSOAPRequest(
                "UpdateCheckinNoteFieldName",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateCheckinNoteFieldName");
                    }
                });

        final _RepositorySoap_UpdateCheckinNoteFieldNameResponse responseData = new _RepositorySoap_UpdateCheckinNoteFieldNameResponse();

        executeSOAPRequest(
            request,
            "UpdateCheckinNoteFieldNameResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _RepositorySoap_UpdateGlobalSecurityResponse updateGlobalSecurity(final _PermissionChange[] changes)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UpdateGlobalSecurity requestData = new _RepositorySoap_UpdateGlobalSecurity(changes);

        final SOAPRequest request = createSOAPRequest(
                "UpdateGlobalSecurity",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateGlobalSecurity");
                    }
                });

        final _RepositorySoap_UpdateGlobalSecurityResponse responseData = new _RepositorySoap_UpdateGlobalSecurityResponse();

        executeSOAPRequest(
            request,
            "UpdateGlobalSecurityResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositorySoap_UpdateItemSecurityResponse updateItemSecurity(
        final String workspaceName,
        final String workspaceOwner,
        final _SecurityChange[] changes)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UpdateItemSecurity requestData = new _RepositorySoap_UpdateItemSecurity(workspaceName,
                workspaceOwner, changes);

        final SOAPRequest request = createSOAPRequest(
                "UpdateItemSecurity",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateItemSecurity");
                    }
                });

        final _RepositorySoap_UpdateItemSecurityResponse responseData = new _RepositorySoap_UpdateItemSecurityResponse();

        executeSOAPRequest(
            request,
            "UpdateItemSecurityResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void updateLocalVersion(
        final String workspaceName,
        final String ownerName,
        final _LocalVersionUpdate[] updates)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UpdateLocalVersion requestData = new _RepositorySoap_UpdateLocalVersion(workspaceName,
                ownerName, updates);

        final SOAPRequest request = createSOAPRequest(
                "UpdateLocalVersion",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateLocalVersion");
                    }
                });

        final _RepositorySoap_UpdateLocalVersionResponse responseData = new _RepositorySoap_UpdateLocalVersionResponse();

        executeSOAPRequest(
            request,
            "UpdateLocalVersionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void updatePendingState(
        final String workspaceName,
        final String workspaceOwner,
        final _PendingState[] updates)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UpdatePendingState requestData = new _RepositorySoap_UpdatePendingState(workspaceName,
                workspaceOwner, updates);

        final SOAPRequest request = createSOAPRequest(
                "UpdatePendingState",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdatePendingState");
                    }
                });

        final _RepositorySoap_UpdatePendingStateResponse responseData = new _RepositorySoap_UpdatePendingStateResponse();

        executeSOAPRequest(
            request,
            "UpdatePendingStateResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Workspace updateWorkspace(
        final String oldWorkspaceName,
        final String ownerName,
        final _Workspace newWorkspace,
        final int supportedFeatures)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_UpdateWorkspace requestData = new _RepositorySoap_UpdateWorkspace(oldWorkspaceName,
                ownerName, newWorkspace, supportedFeatures);

        final SOAPRequest request = createSOAPRequest(
                "UpdateWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateWorkspace");
                    }
                });

        final _RepositorySoap_UpdateWorkspaceResponse responseData = new _RepositorySoap_UpdateWorkspaceResponse();

        executeSOAPRequest(
            request,
            "UpdateWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getUpdateWorkspaceResult();
    }

    public _PendingChange[] queryPendingChangesById(
        final int[] pendingChangeIds,
        final boolean generateDownloadUrls)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryPendingChangesById requestData = new _RepositorySoap_QueryPendingChangesById(
                    pendingChangeIds,
                    generateDownloadUrls);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingChangesById",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingChangesById");
                    }
                });

        final _RepositorySoap_QueryPendingChangesByIdResponse responseData = new _RepositorySoap_QueryPendingChangesByIdResponse();

        executeSOAPRequest(
            request,
            "QueryPendingChangesByIdResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryPendingChangesByIdResult();
    }

    public _Item[] queryItemsById(
        final int[] itemIds,
        final int changeSet,
        final boolean generateDownloadUrls,
        final int options)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_QueryItemsById requestData = new _RepositorySoap_QueryItemsById(itemIds, changeSet,
                generateDownloadUrls, options);

        final SOAPRequest request = createSOAPRequest(
                "QueryItemsById",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryItemsById");
                    }
                });

        final _RepositorySoap_QueryItemsByIdResponse responseData = new _RepositorySoap_QueryItemsByIdResponse();

        executeSOAPRequest(
            request,
            "QueryItemsByIdResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryItemsByIdResult();
    }

    public void createTeamProjectFolder(final _TeamProjectFolderOptions teamProjectOptions)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CreateTeamProjectFolder requestData = new _RepositorySoap_CreateTeamProjectFolder(
                    teamProjectOptions);

        final SOAPRequest request = createSOAPRequest(
                "CreateTeamProjectFolder",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateTeamProjectFolder");
                    }
                });

        final _RepositorySoap_CreateTeamProjectFolderResponse responseData = new _RepositorySoap_CreateTeamProjectFolderResponse();

        executeSOAPRequest(
            request,
            "CreateTeamProjectFolderResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _CheckinResult createBranch(
        final String sourcePath,
        final String targetPath,
        final _VersionSpec version,
        final _Changeset info,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final _Mapping[] mappings)
        throws TransportException, SOAPFault
    {
        final _RepositorySoap_CreateBranch requestData = new _RepositorySoap_CreateBranch(sourcePath, targetPath,
                version, info, checkinNotificationInfo, mappings);

        final SOAPRequest request = createSOAPRequest(
                "CreateBranch",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateBranch");
                    }
                });

        final _RepositorySoap_CreateBranchResponse responseData = new _RepositorySoap_CreateBranchResponse();

        executeSOAPRequest(
            request,
            "CreateBranchResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCreateBranchResult();
    }
}
