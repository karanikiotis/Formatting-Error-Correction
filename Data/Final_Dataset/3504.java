// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.tfs.versioncontrol.clientservices._03._ArtifactPropertyValue;
import ms.tfs.versioncontrol.clientservices._03._ArtifactSpec;
import ms.tfs.versioncontrol.clientservices._03._BranchObject;
import ms.tfs.versioncontrol.clientservices._03._BranchObjectOwnership;
import ms.tfs.versioncontrol.clientservices._03._BranchProperties;
import ms.tfs.versioncontrol.clientservices._03._Change;
import ms.tfs.versioncontrol.clientservices._03._ChangeRequest;
import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._Changeset;
import ms.tfs.versioncontrol.clientservices._03._ChangesetSummary;
import ms.tfs.versioncontrol.clientservices._03._CheckinNote;
import ms.tfs.versioncontrol.clientservices._03._CheckinNoteFieldValue;
import ms.tfs.versioncontrol.clientservices._03._CheckinNotificationInfo;
import ms.tfs.versioncontrol.clientservices._03._CheckinNotificationWorkItemInfo;
import ms.tfs.versioncontrol.clientservices._03._CheckinResult;
import ms.tfs.versioncontrol.clientservices._03._CheckinWorkItemAction;
import ms.tfs.versioncontrol.clientservices._03._Conflict;
import ms.tfs.versioncontrol.clientservices._03._ConflictType;
import ms.tfs.versioncontrol.clientservices._03._DeletedState;
import ms.tfs.versioncontrol.clientservices._03._ExtendedMerge;
import ms.tfs.versioncontrol.clientservices._03._Failure;
import ms.tfs.versioncontrol.clientservices._03._GetOperation;
import ms.tfs.versioncontrol.clientservices._03._GetRequest;
import ms.tfs.versioncontrol.clientservices._03._Item;
import ms.tfs.versioncontrol.clientservices._03._ItemIdentifier;
import ms.tfs.versioncontrol.clientservices._03._ItemSpec;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._Mapping;
import ms.tfs.versioncontrol.clientservices._03._MergeSource;
import ms.tfs.versioncontrol.clientservices._03._PendingChange;
import ms.tfs.versioncontrol.clientservices._03._PolicyFailureInfo;
import ms.tfs.versioncontrol.clientservices._03._PolicyOverrideInfo;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;
import ms.tfs.versioncontrol.clientservices._03._ProxyInfo;
import ms.tfs.versioncontrol.clientservices._03._RecursionType;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_AddProxy;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_AddProxyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_CheckIn;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_CheckInResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_CheckInShelveset;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_CheckInShelvesetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_DeleteBranchObject;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_DeleteBranchObjectResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_DeleteProxy;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_DeleteProxyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_Get;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_GetChangesetProperty;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_GetChangesetPropertyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_GetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_GetVersionedItemProperty;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_GetVersionedItemPropertyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_Merge;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_MergeResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_PendChanges;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_PendChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryBranchObjectOwnership;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryBranchObjectOwnershipResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryBranchObjects;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryBranchObjectsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryChangesForChangeset;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryChangesForChangesetResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryChangesetExtended;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryChangesetExtendedResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryMergeRelationships;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryMergeRelationshipsResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryMergesExtended;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryMergesExtendedResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryPendingChangesForWorkspace;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryPendingChangesForWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryProxies;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_QueryProxiesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_ResetCheckinDates;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_ResetCheckinDatesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_Resolve;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_ResolveResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_Rollback;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_RollbackResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_SetChangesetProperty;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_SetChangesetPropertyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_SetPendingChangeProperty;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_SetPendingChangePropertyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_SetVersionedItemProperty;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_SetVersionedItemPropertyResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_TrackMerges;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_TrackMergesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_UndoPendingChanges;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_UndoPendingChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_Unshelve;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_UnshelveResponse;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_UpdateBranchObject;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_UpdateBranchObjectResponse;
import ms.tfs.versioncontrol.clientservices._03._RequestType;
import ms.tfs.versioncontrol.clientservices._03._Resolution;
import ms.tfs.versioncontrol.clientservices._03._SeverityType;
import ms.tfs.versioncontrol.clientservices._03._Shelveset;
import ms.tfs.versioncontrol.clientservices._03._VersionControlLink;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;
import ms.tfs.versioncontrol.clientservices._03._Warning;
import ms.tfs.versioncontrol.clientservices._03._WarningType;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolderType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.Object;
import java.lang.String;

import java.net.URI;

import java.util.Calendar;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices/03}RepositoryExtensionsSoapService
 */
public class _RepositoryExtensionsSoapService
    extends SOAP11Service
    implements _RepositoryExtensionsSoap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices/03",
                "RepositoryExtensionsSoapService");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/VersionControl/v3.0/Repository.asmx";

    public _RepositoryExtensionsSoapService(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _RepositoryExtensionsSoapService(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _RepositoryExtensionsSoapService.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _RepositoryExtensionsSoapService.ENDPOINT_PATH;
    }

    public _RepositoryExtensionsSoap_CheckInResponse checkIn(
        final String workspaceName,
        final String ownerName,
        final String[] serverItems,
        final _Changeset info,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final int checkinOptions,
        final boolean deferCheckIn,
        final int checkInTicket)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_CheckIn requestData = new _RepositoryExtensionsSoap_CheckIn(workspaceName,
                ownerName, serverItems, info, checkinNotificationInfo, checkinOptions, deferCheckIn, checkInTicket);

        final SOAPRequest request = createSOAPRequest(
                "CheckIn",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckIn");
                    }
                });

        final _RepositoryExtensionsSoap_CheckInResponse responseData = new _RepositoryExtensionsSoap_CheckInResponse();

        executeSOAPRequest(
            request,
            "CheckInResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void resetCheckinDates(final Calendar lastCheckinDate)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_ResetCheckinDates requestData = new _RepositoryExtensionsSoap_ResetCheckinDates(
                    lastCheckinDate);

        final SOAPRequest request = createSOAPRequest(
                "ResetCheckinDates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ResetCheckinDates");
                    }
                });

        final _RepositoryExtensionsSoap_ResetCheckinDatesResponse responseData = new _RepositoryExtensionsSoap_ResetCheckinDatesResponse();

        executeSOAPRequest(
            request,
            "ResetCheckinDatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteBranchObject(final _ItemIdentifier rootItem)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_DeleteBranchObject requestData = new _RepositoryExtensionsSoap_DeleteBranchObject(
                    rootItem);

        final SOAPRequest request = createSOAPRequest(
                "DeleteBranchObject",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteBranchObject");
                    }
                });

        final _RepositoryExtensionsSoap_DeleteBranchObjectResponse responseData = new _RepositoryExtensionsSoap_DeleteBranchObjectResponse();

        executeSOAPRequest(
            request,
            "DeleteBranchObjectResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _BranchObject[] queryBranchObjects(
        final _ItemIdentifier item,
        final _RecursionType recursion)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryBranchObjects requestData = new _RepositoryExtensionsSoap_QueryBranchObjects(
                    item,
                    recursion);

        final SOAPRequest request = createSOAPRequest(
                "QueryBranchObjects",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryBranchObjects");
                    }
                });

        final _RepositoryExtensionsSoap_QueryBranchObjectsResponse responseData = new _RepositoryExtensionsSoap_QueryBranchObjectsResponse();

        executeSOAPRequest(
            request,
            "QueryBranchObjectsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryBranchObjectsResult();
    }

    public _BranchObjectOwnership[] queryBranchObjectOwnership(
        final int[] changesets,
        final _ItemSpec pathFilter)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryBranchObjectOwnership requestData = new _RepositoryExtensionsSoap_QueryBranchObjectOwnership(
                    changesets,
                    pathFilter);

        final SOAPRequest request = createSOAPRequest(
                "QueryBranchObjectOwnership",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryBranchObjectOwnership");
                    }
                });

        final _RepositoryExtensionsSoap_QueryBranchObjectOwnershipResponse responseData = new _RepositoryExtensionsSoap_QueryBranchObjectOwnershipResponse();

        executeSOAPRequest(
            request,
            "QueryBranchObjectOwnershipResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryBranchObjectOwnershipResult();
    }

    public void updateBranchObject(
        final _BranchProperties branchProperties,
        final boolean updateExisting)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_UpdateBranchObject requestData = new _RepositoryExtensionsSoap_UpdateBranchObject(
                    branchProperties,
                    updateExisting);

        final SOAPRequest request = createSOAPRequest(
                "UpdateBranchObject",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateBranchObject");
                    }
                });

        final _RepositoryExtensionsSoap_UpdateBranchObjectResponse responseData = new _RepositoryExtensionsSoap_UpdateBranchObjectResponse();

        executeSOAPRequest(
            request,
            "UpdateBranchObjectResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _RepositoryExtensionsSoap_CheckInShelvesetResponse checkInShelveset(
        final String shelvesetName,
        final String ownerName,
        final String changesetOwner,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final int checkinOptions)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_CheckInShelveset requestData = new _RepositoryExtensionsSoap_CheckInShelveset(
                    shelvesetName,
                    ownerName,
                    changesetOwner,
                    checkinNotificationInfo,
                    checkinOptions);

        final SOAPRequest request = createSOAPRequest(
                "CheckInShelveset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckInShelveset");
                    }
                });

        final _RepositoryExtensionsSoap_CheckInShelvesetResponse responseData = new _RepositoryExtensionsSoap_CheckInShelvesetResponse();

        executeSOAPRequest(
            request,
            "CheckInShelvesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositoryExtensionsSoap_RollbackResponse rollback(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _VersionSpec itemVersion,
        final _VersionSpec from,
        final _VersionSpec to,
        final int rollbackOptions,
        final _LockLevel lockLevel,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_Rollback requestData = new _RepositoryExtensionsSoap_Rollback(workspaceName,
                workspaceOwner, items, itemVersion, from, to, rollbackOptions, lockLevel, propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "Rollback",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Rollback");
                    }
                });

        final _RepositoryExtensionsSoap_RollbackResponse responseData = new _RepositoryExtensionsSoap_RollbackResponse();

        executeSOAPRequest(
            request,
            "RollbackResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ProxyInfo[] queryProxies(final String[] proxyUrls)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryProxies requestData = new _RepositoryExtensionsSoap_QueryProxies(proxyUrls);

        final SOAPRequest request = createSOAPRequest(
                "QueryProxies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryProxies");
                    }
                });

        final _RepositoryExtensionsSoap_QueryProxiesResponse responseData = new _RepositoryExtensionsSoap_QueryProxiesResponse();

        executeSOAPRequest(
            request,
            "QueryProxiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryProxiesResult();
    }

    public void addProxy(final _ProxyInfo proxy)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_AddProxy requestData = new _RepositoryExtensionsSoap_AddProxy(proxy);

        final SOAPRequest request = createSOAPRequest(
                "AddProxy",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "AddProxy");
                    }
                });

        final _RepositoryExtensionsSoap_AddProxyResponse responseData = new _RepositoryExtensionsSoap_AddProxyResponse();

        executeSOAPRequest(
            request,
            "AddProxyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteProxy(final String proxyUrl)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_DeleteProxy requestData = new _RepositoryExtensionsSoap_DeleteProxy(proxyUrl);

        final SOAPRequest request = createSOAPRequest(
                "DeleteProxy",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteProxy");
                    }
                });

        final _RepositoryExtensionsSoap_DeleteProxyResponse responseData = new _RepositoryExtensionsSoap_DeleteProxyResponse();

        executeSOAPRequest(
            request,
            "DeleteProxyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ArtifactPropertyValue getChangesetProperty(
        final int changesetId,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_GetChangesetProperty requestData = new _RepositoryExtensionsSoap_GetChangesetProperty(
                    changesetId,
                    propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "GetChangesetProperty",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetChangesetProperty");
                    }
                });

        final _RepositoryExtensionsSoap_GetChangesetPropertyResponse responseData = new _RepositoryExtensionsSoap_GetChangesetPropertyResponse();

        executeSOAPRequest(
            request,
            "GetChangesetPropertyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetChangesetPropertyResult();
    }

    public void setChangesetProperty(
        final int changesetId,
        final _PropertyValue[] propertyValues)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_SetChangesetProperty requestData = new _RepositoryExtensionsSoap_SetChangesetProperty(
                    changesetId,
                    propertyValues);

        final SOAPRequest request = createSOAPRequest(
                "SetChangesetProperty",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetChangesetProperty");
                    }
                });

        final _RepositoryExtensionsSoap_SetChangesetPropertyResponse responseData = new _RepositoryExtensionsSoap_SetChangesetPropertyResponse();

        executeSOAPRequest(
            request,
            "SetChangesetPropertyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ArtifactPropertyValue[] getVersionedItemProperty(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] itemSpecs,
        final _VersionSpec versionSpec,
        final _DeletedState deletedState,
        final _ItemType itemType,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_GetVersionedItemProperty requestData = new _RepositoryExtensionsSoap_GetVersionedItemProperty(
                    workspaceName,
                    workspaceOwner,
                    itemSpecs,
                    versionSpec,
                    deletedState,
                    itemType,
                    propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "GetVersionedItemProperty",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetVersionedItemProperty");
                    }
                });

        final _RepositoryExtensionsSoap_GetVersionedItemPropertyResponse responseData = new _RepositoryExtensionsSoap_GetVersionedItemPropertyResponse();

        executeSOAPRequest(
            request,
            "GetVersionedItemPropertyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetVersionedItemPropertyResult();
    }

    public void setVersionedItemProperty(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] itemSpecs,
        final _VersionSpec versionSpec,
        final _DeletedState deletedState,
        final _ItemType itemType,
        final _PropertyValue[] propertyValues)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_SetVersionedItemProperty requestData = new _RepositoryExtensionsSoap_SetVersionedItemProperty(
                    workspaceName,
                    workspaceOwner,
                    itemSpecs,
                    versionSpec,
                    deletedState,
                    itemType,
                    propertyValues);

        final SOAPRequest request = createSOAPRequest(
                "SetVersionedItemProperty",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetVersionedItemProperty");
                    }
                });

        final _RepositoryExtensionsSoap_SetVersionedItemPropertyResponse responseData = new _RepositoryExtensionsSoap_SetVersionedItemPropertyResponse();

        executeSOAPRequest(
            request,
            "SetVersionedItemPropertyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Changeset queryChangesetExtended(
        final int changesetId,
        final boolean includeChanges,
        final boolean generateDownloadUrls,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryChangesetExtended requestData = new _RepositoryExtensionsSoap_QueryChangesetExtended(
                    changesetId,
                    includeChanges,
                    generateDownloadUrls,
                    propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryChangesetExtended",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryChangesetExtended");
                    }
                });

        final _RepositoryExtensionsSoap_QueryChangesetExtendedResponse responseData = new _RepositoryExtensionsSoap_QueryChangesetExtendedResponse();

        executeSOAPRequest(
            request,
            "QueryChangesetExtendedResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryChangesetExtendedResult();
    }

    public _Change[] queryChangesForChangeset(
        final int changesetId,
        final boolean generateDownloadUrls,
        final int pageSize,
        final _ItemSpec lastItem,
        final String[] propertyNameFilters,
        final boolean includeMergeSourceInfo)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryChangesForChangeset requestData = new _RepositoryExtensionsSoap_QueryChangesForChangeset(
                    changesetId,
                    generateDownloadUrls,
                    pageSize,
                    lastItem,
                    propertyNameFilters,
                    includeMergeSourceInfo);

        final SOAPRequest request = createSOAPRequest(
                "QueryChangesForChangeset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryChangesForChangeset");
                    }
                });

        final _RepositoryExtensionsSoap_QueryChangesForChangesetResponse responseData = new _RepositoryExtensionsSoap_QueryChangesForChangesetResponse();

        executeSOAPRequest(
            request,
            "QueryChangesForChangesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryChangesForChangesetResult();
    }

    public _GetOperation[][] get(
        final String workspaceName,
        final String ownerName,
        final _GetRequest[] requests,
        final int maxResults,
        final int options,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_Get requestData = new _RepositoryExtensionsSoap_Get(workspaceName, ownerName,
                requests, maxResults, options, propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "Get",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Get");
                    }
                });

        final _RepositoryExtensionsSoap_GetResponse responseData = new _RepositoryExtensionsSoap_GetResponse();

        executeSOAPRequest(
            request,
            "GetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetResult();
    }

    public _RepositoryExtensionsSoap_MergeResponse merge(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _ItemSpec target,
        final _VersionSpec from,
        final _VersionSpec to,
        final _LockLevel lockLevel,
        final int optionsEx,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_Merge requestData = new _RepositoryExtensionsSoap_Merge(workspaceName,
                workspaceOwner, source, target, from, to, lockLevel, optionsEx, propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "Merge",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Merge");
                    }
                });

        final _RepositoryExtensionsSoap_MergeResponse responseData = new _RepositoryExtensionsSoap_MergeResponse();

        executeSOAPRequest(
            request,
            "MergeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositoryExtensionsSoap_QueryPendingChangesForWorkspaceResponse queryPendingChangesForWorkspace(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final int pageSize,
        final String lastChange,
        final boolean includeMergeInfo)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryPendingChangesForWorkspace requestData = new _RepositoryExtensionsSoap_QueryPendingChangesForWorkspace(
                    workspaceName,
                    workspaceOwner,
                    itemSpecs,
                    generateDownloadUrls,
                    pageSize,
                    lastChange,
                    includeMergeInfo);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingChangesForWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingChangesForWorkspace");
                    }
                });

        final _RepositoryExtensionsSoap_QueryPendingChangesForWorkspaceResponse responseData = new _RepositoryExtensionsSoap_QueryPendingChangesForWorkspaceResponse();

        executeSOAPRequest(
            request,
            "QueryPendingChangesForWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositoryExtensionsSoap_UndoPendingChangesResponse undoPendingChanges(
        final String workspaceName,
        final String ownerName,
        final _ItemSpec[] items,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_UndoPendingChanges requestData = new _RepositoryExtensionsSoap_UndoPendingChanges(
                    workspaceName,
                    ownerName,
                    items,
                    propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "UndoPendingChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UndoPendingChanges");
                    }
                });

        final _RepositoryExtensionsSoap_UndoPendingChangesResponse responseData = new _RepositoryExtensionsSoap_UndoPendingChangesResponse();

        executeSOAPRequest(
            request,
            "UndoPendingChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositoryExtensionsSoap_UnshelveResponse unshelve(
        final String shelvesetName,
        final String shelvesetOwner,
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_Unshelve requestData = new _RepositoryExtensionsSoap_Unshelve(shelvesetName,
                shelvesetOwner, workspaceName, workspaceOwner, items, propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "Unshelve",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Unshelve");
                    }
                });

        final _RepositoryExtensionsSoap_UnshelveResponse responseData = new _RepositoryExtensionsSoap_UnshelveResponse();

        executeSOAPRequest(
            request,
            "UnshelveResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositoryExtensionsSoap_ResolveResponse resolve(
        final String workspaceName,
        final String ownerName,
        final int conflictId,
        final _Resolution resolution,
        final String newPath,
        final int encoding,
        final _LockLevel lockLevel,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_Resolve requestData = new _RepositoryExtensionsSoap_Resolve(workspaceName,
                ownerName, conflictId, resolution, newPath, encoding, lockLevel, propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "Resolve",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Resolve");
                    }
                });

        final _RepositoryExtensionsSoap_ResolveResponse responseData = new _RepositoryExtensionsSoap_ResolveResponse();

        executeSOAPRequest(
            request,
            "ResolveResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _RepositoryExtensionsSoap_PendChangesResponse pendChanges(
        final String workspaceName,
        final String ownerName,
        final _ChangeRequest[] changes,
        final int pendChangesOptions,
        final int supportedFeatures,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_PendChanges requestData = new _RepositoryExtensionsSoap_PendChanges(workspaceName,
                ownerName,
                changes,
                pendChangesOptions,
                supportedFeatures,
                propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "PendChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "PendChanges");
                    }
                });

        final _RepositoryExtensionsSoap_PendChangesResponse responseData = new _RepositoryExtensionsSoap_PendChangesResponse();

        executeSOAPRequest(
            request,
            "PendChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Failure[] setPendingChangeProperty(
        final String workspaceName,
        final String workspaceOwner,
        final _ArtifactPropertyValue[] pendingChangePropertyValues)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_SetPendingChangeProperty requestData = new _RepositoryExtensionsSoap_SetPendingChangeProperty(
                    workspaceName,
                    workspaceOwner,
                    pendingChangePropertyValues);

        final SOAPRequest request = createSOAPRequest(
                "SetPendingChangeProperty",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetPendingChangeProperty");
                    }
                });

        final _RepositoryExtensionsSoap_SetPendingChangePropertyResponse responseData = new _RepositoryExtensionsSoap_SetPendingChangePropertyResponse();

        executeSOAPRequest(
            request,
            "SetPendingChangePropertyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getSetPendingChangePropertyResult();
    }

    public _ExtendedMerge[] queryMergesExtended(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec target,
        final _VersionSpec versionTarget,
        final _VersionSpec versionFrom,
        final _VersionSpec versionTo,
        final int options)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryMergesExtended requestData = new _RepositoryExtensionsSoap_QueryMergesExtended(
                    workspaceName,
                    workspaceOwner,
                    target,
                    versionTarget,
                    versionFrom,
                    versionTo,
                    options);

        final SOAPRequest request = createSOAPRequest(
                "QueryMergesExtended",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryMergesExtended");
                    }
                });

        final _RepositoryExtensionsSoap_QueryMergesExtendedResponse responseData = new _RepositoryExtensionsSoap_QueryMergesExtendedResponse();

        executeSOAPRequest(
            request,
            "QueryMergesExtendedResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryMergesExtendedResult();
    }

    public _RepositoryExtensionsSoap_TrackMergesResponse trackMerges(
        final int[] sourceChangesets,
        final _ItemIdentifier sourceItem,
        final _ItemIdentifier[] targetItems,
        final _ItemSpec pathFilter)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_TrackMerges requestData = new _RepositoryExtensionsSoap_TrackMerges(
                    sourceChangesets,
                    sourceItem,
                    targetItems,
                    pathFilter);

        final SOAPRequest request = createSOAPRequest(
                "TrackMerges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "TrackMerges");
                    }
                });

        final _RepositoryExtensionsSoap_TrackMergesResponse responseData = new _RepositoryExtensionsSoap_TrackMergesResponse();

        executeSOAPRequest(
            request,
            "TrackMergesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ItemIdentifier[] queryMergeRelationships(final String serverItem)
        throws TransportException, SOAPFault
    {
        final _RepositoryExtensionsSoap_QueryMergeRelationships requestData = new _RepositoryExtensionsSoap_QueryMergeRelationships(
                    serverItem);

        final SOAPRequest request = createSOAPRequest(
                "QueryMergeRelationships",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryMergeRelationships");
                    }
                });

        final _RepositoryExtensionsSoap_QueryMergeRelationshipsResponse responseData = new _RepositoryExtensionsSoap_QueryMergeRelationshipsResponse();

        executeSOAPRequest(
            request,
            "QueryMergeRelationshipsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryMergeRelationshipsResult();
    }
}
