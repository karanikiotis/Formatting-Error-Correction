// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._04;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._04._BuildDefinition;
import ms.tfs.build.buildservice._04._BuildDefinitionSourceProvider;
import ms.tfs.build.buildservice._04._BuildReason;
import ms.tfs.build.buildservice._04._BuildStatus;
import ms.tfs.build.buildservice._04._DefinitionQueueStatus;
import ms.tfs.build.buildservice._04._DefinitionTriggerType;
import ms.tfs.build.buildservice._04._DeleteOptions;
import ms.tfs.build.buildservice._04._NameValueField;
import ms.tfs.build.buildservice._04._ProcessTemplate;
import ms.tfs.build.buildservice._04._ProcessTemplateType;
import ms.tfs.build.buildservice._04._PropertyValue;
import ms.tfs.build.buildservice._04._RetentionPolicy;
import ms.tfs.build.buildservice._04._Schedule;
import ms.tfs.build.buildservice._04._ScheduleDays;
import ms.tfs.build.buildservice._04._WorkspaceMapping;
import ms.tfs.build.buildservice._04._WorkspaceMappingType;
import ms.tfs.build.buildservice._04._WorkspaceTemplate;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildDefinition
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int batchSize = 1;
    protected String buildControllerUri;
    protected _DefinitionTriggerType triggerType = new _DefinitionTriggerType(
                new _DefinitionTriggerType._DefinitionTriggerType_Flag[]
                {
                    _DefinitionTriggerType._DefinitionTriggerType_Flag.None
                });
    protected int continuousIntegrationQuietPeriod;
    protected String defaultDropLocation;
    protected _DefinitionQueueStatus queueStatus;
    protected String fullPath;
    protected String lastBuildUri;
    protected String lastGoodBuildUri;
    protected String lastGoodBuildLabel;
    protected String uri;
    protected Calendar dateCreated;

    // Elements
    protected String description;
    protected _ProcessTemplate process;
    protected String processParameters;
    protected _RetentionPolicy[] retentionPolicies;
    protected _Schedule[] schedules;
    protected _BuildDefinitionSourceProvider[] sourceProviders;
    protected _PropertyValue[] properties;
    protected _WorkspaceTemplate workspaceTemplate;

    public _BuildDefinition()
    {
        super();
    }

    public _BuildDefinition(
        final int batchSize,
        final String buildControllerUri,
        final _DefinitionTriggerType triggerType,
        final int continuousIntegrationQuietPeriod,
        final String defaultDropLocation,
        final _DefinitionQueueStatus queueStatus,
        final String fullPath,
        final String lastBuildUri,
        final String lastGoodBuildUri,
        final String lastGoodBuildLabel,
        final String uri,
        final Calendar dateCreated,
        final String description,
        final _ProcessTemplate process,
        final String processParameters,
        final _RetentionPolicy[] retentionPolicies,
        final _Schedule[] schedules,
        final _BuildDefinitionSourceProvider[] sourceProviders,
        final _PropertyValue[] properties,
        final _WorkspaceTemplate workspaceTemplate)
    {
        // TODO : Call super() instead of setting all fields directly?
        setBatchSize(batchSize);
        setBuildControllerUri(buildControllerUri);
        setTriggerType(triggerType);
        setContinuousIntegrationQuietPeriod(continuousIntegrationQuietPeriod);
        setDefaultDropLocation(defaultDropLocation);
        setQueueStatus(queueStatus);
        setFullPath(fullPath);
        setLastBuildUri(lastBuildUri);
        setLastGoodBuildUri(lastGoodBuildUri);
        setLastGoodBuildLabel(lastGoodBuildLabel);
        setUri(uri);
        setDateCreated(dateCreated);
        setDescription(description);
        setProcess(process);
        setProcessParameters(processParameters);
        setRetentionPolicies(retentionPolicies);
        setSchedules(schedules);
        setSourceProviders(sourceProviders);
        setProperties(properties);
        setWorkspaceTemplate(workspaceTemplate);
    }

    public int getBatchSize()
    {
        return this.batchSize;
    }

    public void setBatchSize(final int value)
    {
        this.batchSize = value;
    }

    public String getBuildControllerUri()
    {
        return this.buildControllerUri;
    }

    public void setBuildControllerUri(final String value)
    {
        this.buildControllerUri = value;
    }

    public _DefinitionTriggerType getTriggerType()
    {
        return this.triggerType;
    }

    public void setTriggerType(final _DefinitionTriggerType value)
    {
        this.triggerType = value;
    }

    public int getContinuousIntegrationQuietPeriod()
    {
        return this.continuousIntegrationQuietPeriod;
    }

    public void setContinuousIntegrationQuietPeriod(final int value)
    {
        this.continuousIntegrationQuietPeriod = value;
    }

    public String getDefaultDropLocation()
    {
        return this.defaultDropLocation;
    }

    public void setDefaultDropLocation(final String value)
    {
        this.defaultDropLocation = value;
    }

    public _DefinitionQueueStatus getQueueStatus()
    {
        return this.queueStatus;
    }

    public void setQueueStatus(final _DefinitionQueueStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'QueueStatus' is a required attribute, its value cannot be null");
        }

        this.queueStatus = value;
    }

    public String getFullPath()
    {
        return this.fullPath;
    }

    public void setFullPath(final String value)
    {
        this.fullPath = value;
    }

    public String getLastBuildUri()
    {
        return this.lastBuildUri;
    }

    public void setLastBuildUri(final String value)
    {
        this.lastBuildUri = value;
    }

    public String getLastGoodBuildUri()
    {
        return this.lastGoodBuildUri;
    }

    public void setLastGoodBuildUri(final String value)
    {
        this.lastGoodBuildUri = value;
    }

    public String getLastGoodBuildLabel()
    {
        return this.lastGoodBuildLabel;
    }

    public void setLastGoodBuildLabel(final String value)
    {
        this.lastGoodBuildLabel = value;
    }

    public String getUri()
    {
        return this.uri;
    }

    public void setUri(final String value)
    {
        this.uri = value;
    }

    public Calendar getDateCreated()
    {
        return this.dateCreated;
    }

    public void setDateCreated(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'DateCreated' is a required attribute, its value cannot be null");
        }

        this.dateCreated = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public _ProcessTemplate getProcess()
    {
        return this.process;
    }

    public void setProcess(_ProcessTemplate value)
    {
        this.process = value;
    }

    public String getProcessParameters()
    {
        return this.processParameters;
    }

    public void setProcessParameters(String value)
    {
        this.processParameters = value;
    }

    public _RetentionPolicy[] getRetentionPolicies()
    {
        return this.retentionPolicies;
    }

    public void setRetentionPolicies(_RetentionPolicy[] value)
    {
        this.retentionPolicies = value;
    }

    public _Schedule[] getSchedules()
    {
        return this.schedules;
    }

    public void setSchedules(_Schedule[] value)
    {
        this.schedules = value;
    }

    public _BuildDefinitionSourceProvider[] getSourceProviders()
    {
        return this.sourceProviders;
    }

    public void setSourceProviders(_BuildDefinitionSourceProvider[] value)
    {
        this.sourceProviders = value;
    }

    public _PropertyValue[] getProperties()
    {
        return this.properties;
    }

    public void setProperties(_PropertyValue[] value)
    {
        this.properties = value;
    }

    public _WorkspaceTemplate getWorkspaceTemplate()
    {
        return this.workspaceTemplate;
    }

    public void setWorkspaceTemplate(_WorkspaceTemplate value)
    {
        this.workspaceTemplate = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BatchSize",
            this.batchSize);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildControllerUri",
            this.buildControllerUri);

        if (this.triggerType != null)
        {
            this.triggerType.writeAsAttribute(
                writer,
                "TriggerType");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ContinuousIntegrationQuietPeriod",
            this.continuousIntegrationQuietPeriod);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DefaultDropLocation",
            this.defaultDropLocation);
        this.queueStatus.writeAsAttribute(
            writer,
            "QueueStatus");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FullPath",
            this.fullPath);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastBuildUri",
            this.lastBuildUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastGoodBuildUri",
            this.lastGoodBuildUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastGoodBuildLabel",
            this.lastGoodBuildLabel);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Uri",
            this.uri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DateCreated",
            this.dateCreated,
            true);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);

        if (this.process != null)
        {
            this.process.writeAsElement(
                writer,
                "Process");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "ProcessParameters",
            this.processParameters);

        if (this.retentionPolicies != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("RetentionPolicies");

            for (int iterator0 = 0; iterator0 < this.retentionPolicies.length; iterator0++)
            {
                this.retentionPolicies[iterator0].writeAsElement(
                    writer,
                    "RetentionPolicy");
            }

            writer.writeEndElement();
        }

        if (this.schedules != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Schedules");

            for (int iterator0 = 0; iterator0 < this.schedules.length; iterator0++)
            {
                this.schedules[iterator0].writeAsElement(
                    writer,
                    "Schedule");
            }

            writer.writeEndElement();
        }

        if (this.sourceProviders != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("SourceProviders");

            for (int iterator0 = 0; iterator0 < this.sourceProviders.length; iterator0++)
            {
                this.sourceProviders[iterator0].writeAsElement(
                    writer,
                    "BuildDefinitionSourceProvider");
            }

            writer.writeEndElement();
        }

        if (this.properties != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Properties");

            for (int iterator0 = 0; iterator0 < this.properties.length; iterator0++)
            {
                this.properties[iterator0].writeAsElement(
                    writer,
                    "PropertyValue");
            }

            writer.writeEndElement();
        }

        if (this.workspaceTemplate != null)
        {
            this.workspaceTemplate.writeAsElement(
                writer,
                "WorkspaceTemplate");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("BatchSize"))
            {
                this.batchSize = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("BuildControllerUri"))
            {
                this.buildControllerUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("TriggerType"))
            {
                this.triggerType = new _DefinitionTriggerType();
                this.triggerType.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ContinuousIntegrationQuietPeriod"))
            {
                this.continuousIntegrationQuietPeriod = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("DefaultDropLocation"))
            {
                this.defaultDropLocation = attributeValue;
            }
            else if (localName.equalsIgnoreCase("QueueStatus"))
            {
                this.queueStatus = _DefinitionQueueStatus.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("FullPath"))
            {
                this.fullPath = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastBuildUri"))
            {
                this.lastBuildUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastGoodBuildUri"))
            {
                this.lastGoodBuildUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastGoodBuildLabel"))
            {
                this.lastGoodBuildLabel = attributeValue;
            }
            else if (localName.equalsIgnoreCase("Uri"))
            {
                this.uri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("DateCreated"))
            {
                this.dateCreated = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Process"))
                {
                    this.process = new _ProcessTemplate();
                    this.process.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("ProcessParameters"))
                {
                    this.processParameters = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("RetentionPolicies"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RetentionPolicy complexObject0 = new _RetentionPolicy();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.retentionPolicies = (_RetentionPolicy[]) list0.toArray(new _RetentionPolicy[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("Schedules"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _Schedule complexObject0 = new _Schedule();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.schedules = (_Schedule[]) list0.toArray(new _Schedule[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("SourceProviders"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _BuildDefinitionSourceProvider complexObject0 = new _BuildDefinitionSourceProvider();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.sourceProviders = (_BuildDefinitionSourceProvider[]) list0.toArray(
                                new _BuildDefinitionSourceProvider[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("Properties"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _PropertyValue complexObject0 = new _PropertyValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.properties = (_PropertyValue[]) list0.toArray(new _PropertyValue[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("WorkspaceTemplate"))
                {
                    this.workspaceTemplate = new _WorkspaceTemplate();
                    this.workspaceTemplate.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
